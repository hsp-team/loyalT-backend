// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go
//
// Generated by this command:
//
//	mockgen -source=handler.go -destination=mocks/mock_service.go -package=mocks userService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	dto "loyalit/internal/domain/entity/dto"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockuserService is a mock of userService interface.
type MockuserService struct {
	ctrl     *gomock.Controller
	recorder *MockuserServiceMockRecorder
	isgomock struct{}
}

// MockuserServiceMockRecorder is the mock recorder for MockuserService.
type MockuserServiceMockRecorder struct {
	mock *MockuserService
}

// NewMockuserService creates a new mock instance.
func NewMockuserService(ctrl *gomock.Controller) *MockuserService {
	mock := &MockuserService{ctrl: ctrl}
	mock.recorder = &MockuserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockuserService) EXPECT() *MockuserServiceMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockuserService) Get(ctx context.Context, userID uuid.UUID) (*dto.UserGetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, userID)
	ret0, _ := ret[0].(*dto.UserGetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockuserServiceMockRecorder) Get(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockuserService)(nil).Get), ctx, userID)
}

// Login mocks base method.
func (m *MockuserService) Login(ctx context.Context, req *dto.UserLoginRequest) (*dto.UserLoginResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, req)
	ret0, _ := ret[0].(*dto.UserLoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockuserServiceMockRecorder) Login(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockuserService)(nil).Login), ctx, req)
}

// Register mocks base method.
func (m *MockuserService) Register(ctx context.Context, req *dto.UserRegisterRequest) (*dto.UserRegisterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, req)
	ret0, _ := ret[0].(*dto.UserRegisterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockuserServiceMockRecorder) Register(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockuserService)(nil).Register), ctx, req)
}

// MockqrService is a mock of qrService interface.
type MockqrService struct {
	ctrl     *gomock.Controller
	recorder *MockqrServiceMockRecorder
	isgomock struct{}
}

// MockqrServiceMockRecorder is the mock recorder for MockqrService.
type MockqrServiceMockRecorder struct {
	mock *MockqrService
}

// NewMockqrService creates a new mock instance.
func NewMockqrService(ctrl *gomock.Controller) *MockqrService {
	mock := &MockqrService{ctrl: ctrl}
	mock.recorder = &MockqrServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockqrService) EXPECT() *MockqrServiceMockRecorder {
	return m.recorder
}

// GetUserQR mocks base method.
func (m *MockqrService) GetUserQR(ctx context.Context, userID uuid.UUID) (*dto.QRGetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserQR", ctx, userID)
	ret0, _ := ret[0].(*dto.QRGetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserQR indicates an expected call of GetUserQR.
func (mr *MockqrServiceMockRecorder) GetUserQR(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserQR", reflect.TypeOf((*MockqrService)(nil).GetUserQR), ctx, userID)
}

// MockstatisticService is a mock of statisticService interface.
type MockstatisticService struct {
	ctrl     *gomock.Controller
	recorder *MockstatisticServiceMockRecorder
	isgomock struct{}
}

// MockstatisticServiceMockRecorder is the mock recorder for MockstatisticService.
type MockstatisticServiceMockRecorder struct {
	mock *MockstatisticService
}

// NewMockstatisticService creates a new mock instance.
func NewMockstatisticService(ctrl *gomock.Controller) *MockstatisticService {
	mock := &MockstatisticService{ctrl: ctrl}
	mock.recorder = &MockstatisticServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockstatisticService) EXPECT() *MockstatisticServiceMockRecorder {
	return m.recorder
}

// GetUserStatistics mocks base method.
func (m *MockstatisticService) GetUserStatistics(ctx context.Context, userID uuid.UUID) (*dto.UserStatisticsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserStatistics", ctx, userID)
	ret0, _ := ret[0].(*dto.UserStatisticsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserStatistics indicates an expected call of GetUserStatistics.
func (mr *MockstatisticServiceMockRecorder) GetUserStatistics(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserStatistics", reflect.TypeOf((*MockstatisticService)(nil).GetUserStatistics), ctx, userID)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: ../../../../config/jwt.go
//
// Generated by this command:
//
//	mockgen -source=../../../../config/jwt.go -destination=mocks/mock_config.go -package=mocks JWTConfig
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockJWTConfig is a mock of JWTConfig interface.
type MockJWTConfig struct {
	ctrl     *gomock.Controller
	recorder *MockJWTConfigMockRecorder
	isgomock struct{}
}

// MockJWTConfigMockRecorder is the mock recorder for MockJWTConfig.
type MockJWTConfigMockRecorder struct {
	mock *MockJWTConfig
}

// NewMockJWTConfig creates a new mock instance.
func NewMockJWTConfig(ctrl *gomock.Controller) *MockJWTConfig {
	mock := &MockJWTConfig{ctrl: ctrl}
	mock.recorder = &MockJWTConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJWTConfig) EXPECT() *MockJWTConfigMockRecorder {
	return m.recorder
}

// BusinessTokenExpiration mocks base method.
func (m *MockJWTConfig) BusinessTokenExpiration() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BusinessTokenExpiration")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// BusinessTokenExpiration indicates an expected call of BusinessTokenExpiration.
func (mr *MockJWTConfigMockRecorder) BusinessTokenExpiration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BusinessTokenExpiration", reflect.TypeOf((*MockJWTConfig)(nil).BusinessTokenExpiration))
}

// BusinessTokenSecret mocks base method.
func (m *MockJWTConfig) BusinessTokenSecret() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BusinessTokenSecret")
	ret0, _ := ret[0].(string)
	return ret0
}

// BusinessTokenSecret indicates an expected call of BusinessTokenSecret.
func (mr *MockJWTConfigMockRecorder) BusinessTokenSecret() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BusinessTokenSecret", reflect.TypeOf((*MockJWTConfig)(nil).BusinessTokenSecret))
}

// UserTokenExpiration mocks base method.
func (m *MockJWTConfig) UserTokenExpiration() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserTokenExpiration")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// UserTokenExpiration indicates an expected call of UserTokenExpiration.
func (mr *MockJWTConfigMockRecorder) UserTokenExpiration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserTokenExpiration", reflect.TypeOf((*MockJWTConfig)(nil).UserTokenExpiration))
}

// UserTokenSecret mocks base method.
func (m *MockJWTConfig) UserTokenSecret() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserTokenSecret")
	ret0, _ := ret[0].(string)
	return ret0
}

// UserTokenSecret indicates an expected call of UserTokenSecret.
func (mr *MockJWTConfigMockRecorder) UserTokenSecret() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserTokenSecret", reflect.TypeOf((*MockJWTConfig)(nil).UserTokenSecret))
}

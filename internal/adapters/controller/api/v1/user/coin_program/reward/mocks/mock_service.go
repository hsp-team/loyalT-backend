// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go
//
// Generated by this command:
//
//	mockgen -source=handler.go -destination=mocks/mock_service.go -package=mocks rewardService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	dto "loyalit/internal/domain/entity/dto"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockrewardService is a mock of rewardService interface.
type MockrewardService struct {
	ctrl     *gomock.Controller
	recorder *MockrewardServiceMockRecorder
	isgomock struct{}
}

// MockrewardServiceMockRecorder is the mock recorder for MockrewardService.
type MockrewardServiceMockRecorder struct {
	mock *MockrewardService
}

// NewMockrewardService creates a new mock instance.
func NewMockrewardService(ctrl *gomock.Controller) *MockrewardService {
	mock := &MockrewardService{ctrl: ctrl}
	mock.recorder = &MockrewardServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockrewardService) EXPECT() *MockrewardServiceMockRecorder {
	return m.recorder
}

// Buy mocks base method.
func (m *MockrewardService) Buy(ctx context.Context, req *dto.RewardBuyRequest, userID uuid.UUID) (*dto.RewardBuyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Buy", ctx, req, userID)
	ret0, _ := ret[0].(*dto.RewardBuyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Buy indicates an expected call of Buy.
func (mr *MockrewardServiceMockRecorder) Buy(ctx, req, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Buy", reflect.TypeOf((*MockrewardService)(nil).Buy), ctx, req, userID)
}

// UserList mocks base method.
func (m *MockrewardService) UserList(ctx context.Context, req *dto.RewardUserListRequest, userID uuid.UUID) ([]dto.RewardReturn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserList", ctx, req, userID)
	ret0, _ := ret[0].([]dto.RewardReturn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserList indicates an expected call of UserList.
func (mr *MockrewardServiceMockRecorder) UserList(ctx, req, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserList", reflect.TypeOf((*MockrewardService)(nil).UserList), ctx, req, userID)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go
//
// Generated by this command:
//
//	mockgen -source=handler.go -destination=mocks/mock_service.go -package=mocks businessService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	dto "loyalit/internal/domain/entity/dto"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockbusinessService is a mock of businessService interface.
type MockbusinessService struct {
	ctrl     *gomock.Controller
	recorder *MockbusinessServiceMockRecorder
	isgomock struct{}
}

// MockbusinessServiceMockRecorder is the mock recorder for MockbusinessService.
type MockbusinessServiceMockRecorder struct {
	mock *MockbusinessService
}

// NewMockbusinessService creates a new mock instance.
func NewMockbusinessService(ctrl *gomock.Controller) *MockbusinessService {
	mock := &MockbusinessService{ctrl: ctrl}
	mock.recorder = &MockbusinessServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockbusinessService) EXPECT() *MockbusinessServiceMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockbusinessService) Get(ctx context.Context, businessID uuid.UUID) (*dto.BusinessReturn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, businessID)
	ret0, _ := ret[0].(*dto.BusinessReturn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockbusinessServiceMockRecorder) Get(ctx, businessID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockbusinessService)(nil).Get), ctx, businessID)
}

// Login mocks base method.
func (m *MockbusinessService) Login(ctx context.Context, req *dto.BusinessLoginRequest) (*dto.BusinessLoginResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, req)
	ret0, _ := ret[0].(*dto.BusinessLoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockbusinessServiceMockRecorder) Login(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockbusinessService)(nil).Login), ctx, req)
}

// Register mocks base method.
func (m *MockbusinessService) Register(ctx context.Context, req *dto.BusinessRegisterRequest) (*dto.BusinessRegisterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, req)
	ret0, _ := ret[0].(*dto.BusinessRegisterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockbusinessServiceMockRecorder) Register(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockbusinessService)(nil).Register), ctx, req)
}

// Update mocks base method.
func (m *MockbusinessService) Update(ctx context.Context, req *dto.BusinessUpdateRequest, businessID uuid.UUID) (*dto.BusinessReturn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, req, businessID)
	ret0, _ := ret[0].(*dto.BusinessReturn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockbusinessServiceMockRecorder) Update(ctx, req, businessID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockbusinessService)(nil).Update), ctx, req, businessID)
}

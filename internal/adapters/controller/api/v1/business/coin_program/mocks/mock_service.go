// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go
//
// Generated by this command:
//
//	mockgen -source=handler.go -destination=mocks/mock_service.go -package=mocks coinProgramService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	dto "loyalit/internal/domain/entity/dto"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockcoinProgramService is a mock of coinProgramService interface.
type MockcoinProgramService struct {
	ctrl     *gomock.Controller
	recorder *MockcoinProgramServiceMockRecorder
	isgomock struct{}
}

// MockcoinProgramServiceMockRecorder is the mock recorder for MockcoinProgramService.
type MockcoinProgramServiceMockRecorder struct {
	mock *MockcoinProgramService
}

// NewMockcoinProgramService creates a new mock instance.
func NewMockcoinProgramService(ctrl *gomock.Controller) *MockcoinProgramService {
	mock := &MockcoinProgramService{ctrl: ctrl}
	mock.recorder = &MockcoinProgramServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcoinProgramService) EXPECT() *MockcoinProgramServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockcoinProgramService) Create(ctx context.Context, req *dto.CoinProgramCreateRequest, businessID uuid.UUID) (*dto.CoinProgramCreateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, req, businessID)
	ret0, _ := ret[0].(*dto.CoinProgramCreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockcoinProgramServiceMockRecorder) Create(ctx, req, businessID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockcoinProgramService)(nil).Create), ctx, req, businessID)
}

// Get mocks base method.
func (m *MockcoinProgramService) Get(ctx context.Context, businessID uuid.UUID) (*dto.CoinProgramReturn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, businessID)
	ret0, _ := ret[0].(*dto.CoinProgramReturn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockcoinProgramServiceMockRecorder) Get(ctx, businessID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockcoinProgramService)(nil).Get), ctx, businessID)
}

// Update mocks base method.
func (m *MockcoinProgramService) Update(ctx context.Context, req *dto.CoinProgramUpdateRequest, businessID uuid.UUID) (*dto.CoinProgramUpdateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, req, businessID)
	ret0, _ := ret[0].(*dto.CoinProgramUpdateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockcoinProgramServiceMockRecorder) Update(ctx, req, businessID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockcoinProgramService)(nil).Update), ctx, req, businessID)
}

// MockqrService is a mock of qrService interface.
type MockqrService struct {
	ctrl     *gomock.Controller
	recorder *MockqrServiceMockRecorder
	isgomock struct{}
}

// MockqrServiceMockRecorder is the mock recorder for MockqrService.
type MockqrServiceMockRecorder struct {
	mock *MockqrService
}

// NewMockqrService creates a new mock instance.
func NewMockqrService(ctrl *gomock.Controller) *MockqrService {
	mock := &MockqrService{ctrl: ctrl}
	mock.recorder = &MockqrServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockqrService) EXPECT() *MockqrServiceMockRecorder {
	return m.recorder
}

// EnrollCoin mocks base method.
func (m *MockqrService) EnrollCoin(ctx context.Context, req *dto.UserEnrollCoinRequest, businessID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnrollCoin", ctx, req, businessID)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnrollCoin indicates an expected call of EnrollCoin.
func (mr *MockqrServiceMockRecorder) EnrollCoin(ctx, req, businessID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnrollCoin", reflect.TypeOf((*MockqrService)(nil).EnrollCoin), ctx, req, businessID)
}

// ScanUserQR mocks base method.
func (m *MockqrService) ScanUserQR(ctx context.Context, req *dto.UserQRScanRequest, businessID uuid.UUID) (*dto.UserQRScanResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScanUserQR", ctx, req, businessID)
	ret0, _ := ret[0].(*dto.UserQRScanResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScanUserQR indicates an expected call of ScanUserQR.
func (mr *MockqrServiceMockRecorder) ScanUserQR(ctx, req, businessID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanUserQR", reflect.TypeOf((*MockqrService)(nil).ScanUserQR), ctx, req, businessID)
}

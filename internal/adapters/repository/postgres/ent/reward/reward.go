// Code generated by ent, DO NOT EDIT.

package reward

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the reward type in the database.
	Label = "reward"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldCost holds the string denoting the cost field in the database.
	FieldCost = "cost"
	// FieldImageURL holds the string denoting the image_url field in the database.
	FieldImageURL = "image_url"
	// EdgeCoinProgram holds the string denoting the coin_program edge name in mutations.
	EdgeCoinProgram = "coin_program"
	// EdgeRewards holds the string denoting the rewards edge name in mutations.
	EdgeRewards = "rewards"
	// Table holds the table name of the reward in the database.
	Table = "rewards"
	// CoinProgramTable is the table that holds the coin_program relation/edge.
	CoinProgramTable = "rewards"
	// CoinProgramInverseTable is the table name for the CoinProgram entity.
	// It exists in this package in order to avoid circular dependency with the "coinprogram" package.
	CoinProgramInverseTable = "coin_programs"
	// CoinProgramColumn is the table column denoting the coin_program relation/edge.
	CoinProgramColumn = "coin_program_rewards"
	// RewardsTable is the table that holds the rewards relation/edge.
	RewardsTable = "coupons"
	// RewardsInverseTable is the table name for the Coupon entity.
	// It exists in this package in order to avoid circular dependency with the "coupon" package.
	RewardsInverseTable = "coupons"
	// RewardsColumn is the table column denoting the rewards relation/edge.
	RewardsColumn = "reward_rewards"
)

// Columns holds all SQL columns for reward fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldName,
	FieldDescription,
	FieldCost,
	FieldImageURL,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "rewards"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"coin_program_rewards",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt time.Time
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// CostValidator is a validator for the "cost" field. It is called by the builders before save.
	CostValidator func(uint) error
	// ImageURLValidator is a validator for the "image_url" field. It is called by the builders before save.
	ImageURLValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Reward queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByCost orders the results by the cost field.
func ByCost(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCost, opts...).ToFunc()
}

// ByImageURL orders the results by the image_url field.
func ByImageURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImageURL, opts...).ToFunc()
}

// ByCoinProgramField orders the results by coin_program field.
func ByCoinProgramField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCoinProgramStep(), sql.OrderByField(field, opts...))
	}
}

// ByRewardsCount orders the results by rewards count.
func ByRewardsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRewardsStep(), opts...)
	}
}

// ByRewards orders the results by rewards terms.
func ByRewards(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRewardsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCoinProgramStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CoinProgramInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CoinProgramTable, CoinProgramColumn),
	)
}
func newRewardsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RewardsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RewardsTable, RewardsColumn),
	)
}

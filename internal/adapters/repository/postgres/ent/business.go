// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"loyalit/internal/adapters/repository/postgres/ent/business"
	"loyalit/internal/adapters/repository/postgres/ent/coinprogram"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Business is the model entity for the Business schema.
type Business struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Password holds the value of the "password" field.
	Password string `json:"password,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BusinessQuery when eager-loading is set.
	Edges        BusinessEdges `json:"edges"`
	selectValues sql.SelectValues
}

// BusinessEdges holds the relations/edges for other nodes in the graph.
type BusinessEdges struct {
	// CoinProgram holds the value of the coin_program edge.
	CoinProgram *CoinProgram `json:"coin_program,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// CoinProgramOrErr returns the CoinProgram value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BusinessEdges) CoinProgramOrErr() (*CoinProgram, error) {
	if e.CoinProgram != nil {
		return e.CoinProgram, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: coinprogram.Label}
	}
	return nil, &NotLoadedError{edge: "coin_program"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Business) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case business.FieldName, business.FieldEmail, business.FieldPassword, business.FieldDescription:
			values[i] = new(sql.NullString)
		case business.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case business.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Business fields.
func (b *Business) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case business.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				b.ID = *value
			}
		case business.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				b.CreatedAt = value.Time
			}
		case business.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				b.Name = value.String
			}
		case business.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				b.Email = value.String
			}
		case business.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				b.Password = value.String
			}
		case business.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				b.Description = value.String
			}
		default:
			b.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Business.
// This includes values selected through modifiers, order, etc.
func (b *Business) Value(name string) (ent.Value, error) {
	return b.selectValues.Get(name)
}

// QueryCoinProgram queries the "coin_program" edge of the Business entity.
func (b *Business) QueryCoinProgram() *CoinProgramQuery {
	return NewBusinessClient(b.config).QueryCoinProgram(b)
}

// Update returns a builder for updating this Business.
// Note that you need to call Business.Unwrap() before calling this method if this Business
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Business) Update() *BusinessUpdateOne {
	return NewBusinessClient(b.config).UpdateOne(b)
}

// Unwrap unwraps the Business entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (b *Business) Unwrap() *Business {
	_tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Business is not a transactional entity")
	}
	b.config.driver = _tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Business) String() string {
	var builder strings.Builder
	builder.WriteString("Business(")
	builder.WriteString(fmt.Sprintf("id=%v, ", b.ID))
	builder.WriteString("created_at=")
	builder.WriteString(b.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(b.Name)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(b.Email)
	builder.WriteString(", ")
	builder.WriteString("password=")
	builder.WriteString(b.Password)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(b.Description)
	builder.WriteByte(')')
	return builder.String()
}

// Businesses is a parsable slice of Business.
type Businesses []*Business

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"loyalit/internal/adapters/repository/postgres/ent/coinprogram"
	"loyalit/internal/adapters/repository/postgres/ent/coinprogramparticipant"
	"loyalit/internal/adapters/repository/postgres/ent/predicate"
	"loyalit/internal/adapters/repository/postgres/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// CoinProgramParticipantUpdate is the builder for updating CoinProgramParticipant entities.
type CoinProgramParticipantUpdate struct {
	config
	hooks    []Hook
	mutation *CoinProgramParticipantMutation
}

// Where appends a list predicates to the CoinProgramParticipantUpdate builder.
func (cppu *CoinProgramParticipantUpdate) Where(ps ...predicate.CoinProgramParticipant) *CoinProgramParticipantUpdate {
	cppu.mutation.Where(ps...)
	return cppu
}

// SetBalance sets the "balance" field.
func (cppu *CoinProgramParticipantUpdate) SetBalance(u uint) *CoinProgramParticipantUpdate {
	cppu.mutation.ResetBalance()
	cppu.mutation.SetBalance(u)
	return cppu
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (cppu *CoinProgramParticipantUpdate) SetNillableBalance(u *uint) *CoinProgramParticipantUpdate {
	if u != nil {
		cppu.SetBalance(*u)
	}
	return cppu
}

// AddBalance adds u to the "balance" field.
func (cppu *CoinProgramParticipantUpdate) AddBalance(u int) *CoinProgramParticipantUpdate {
	cppu.mutation.AddBalance(u)
	return cppu
}

// SetCoinProgramID sets the "coin_program" edge to the CoinProgram entity by ID.
func (cppu *CoinProgramParticipantUpdate) SetCoinProgramID(id uuid.UUID) *CoinProgramParticipantUpdate {
	cppu.mutation.SetCoinProgramID(id)
	return cppu
}

// SetNillableCoinProgramID sets the "coin_program" edge to the CoinProgram entity by ID if the given value is not nil.
func (cppu *CoinProgramParticipantUpdate) SetNillableCoinProgramID(id *uuid.UUID) *CoinProgramParticipantUpdate {
	if id != nil {
		cppu = cppu.SetCoinProgramID(*id)
	}
	return cppu
}

// SetCoinProgram sets the "coin_program" edge to the CoinProgram entity.
func (cppu *CoinProgramParticipantUpdate) SetCoinProgram(c *CoinProgram) *CoinProgramParticipantUpdate {
	return cppu.SetCoinProgramID(c.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (cppu *CoinProgramParticipantUpdate) SetUserID(id uuid.UUID) *CoinProgramParticipantUpdate {
	cppu.mutation.SetUserID(id)
	return cppu
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (cppu *CoinProgramParticipantUpdate) SetNillableUserID(id *uuid.UUID) *CoinProgramParticipantUpdate {
	if id != nil {
		cppu = cppu.SetUserID(*id)
	}
	return cppu
}

// SetUser sets the "user" edge to the User entity.
func (cppu *CoinProgramParticipantUpdate) SetUser(u *User) *CoinProgramParticipantUpdate {
	return cppu.SetUserID(u.ID)
}

// Mutation returns the CoinProgramParticipantMutation object of the builder.
func (cppu *CoinProgramParticipantUpdate) Mutation() *CoinProgramParticipantMutation {
	return cppu.mutation
}

// ClearCoinProgram clears the "coin_program" edge to the CoinProgram entity.
func (cppu *CoinProgramParticipantUpdate) ClearCoinProgram() *CoinProgramParticipantUpdate {
	cppu.mutation.ClearCoinProgram()
	return cppu
}

// ClearUser clears the "user" edge to the User entity.
func (cppu *CoinProgramParticipantUpdate) ClearUser() *CoinProgramParticipantUpdate {
	cppu.mutation.ClearUser()
	return cppu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cppu *CoinProgramParticipantUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cppu.sqlSave, cppu.mutation, cppu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cppu *CoinProgramParticipantUpdate) SaveX(ctx context.Context) int {
	affected, err := cppu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cppu *CoinProgramParticipantUpdate) Exec(ctx context.Context) error {
	_, err := cppu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cppu *CoinProgramParticipantUpdate) ExecX(ctx context.Context) {
	if err := cppu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cppu *CoinProgramParticipantUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(coinprogramparticipant.Table, coinprogramparticipant.Columns, sqlgraph.NewFieldSpec(coinprogramparticipant.FieldID, field.TypeUUID))
	if ps := cppu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cppu.mutation.Balance(); ok {
		_spec.SetField(coinprogramparticipant.FieldBalance, field.TypeUint, value)
	}
	if value, ok := cppu.mutation.AddedBalance(); ok {
		_spec.AddField(coinprogramparticipant.FieldBalance, field.TypeUint, value)
	}
	if cppu.mutation.CoinProgramCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   coinprogramparticipant.CoinProgramTable,
			Columns: []string{coinprogramparticipant.CoinProgramColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coinprogram.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cppu.mutation.CoinProgramIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   coinprogramparticipant.CoinProgramTable,
			Columns: []string{coinprogramparticipant.CoinProgramColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coinprogram.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cppu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   coinprogramparticipant.UserTable,
			Columns: []string{coinprogramparticipant.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cppu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   coinprogramparticipant.UserTable,
			Columns: []string{coinprogramparticipant.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cppu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{coinprogramparticipant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cppu.mutation.done = true
	return n, nil
}

// CoinProgramParticipantUpdateOne is the builder for updating a single CoinProgramParticipant entity.
type CoinProgramParticipantUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CoinProgramParticipantMutation
}

// SetBalance sets the "balance" field.
func (cppuo *CoinProgramParticipantUpdateOne) SetBalance(u uint) *CoinProgramParticipantUpdateOne {
	cppuo.mutation.ResetBalance()
	cppuo.mutation.SetBalance(u)
	return cppuo
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (cppuo *CoinProgramParticipantUpdateOne) SetNillableBalance(u *uint) *CoinProgramParticipantUpdateOne {
	if u != nil {
		cppuo.SetBalance(*u)
	}
	return cppuo
}

// AddBalance adds u to the "balance" field.
func (cppuo *CoinProgramParticipantUpdateOne) AddBalance(u int) *CoinProgramParticipantUpdateOne {
	cppuo.mutation.AddBalance(u)
	return cppuo
}

// SetCoinProgramID sets the "coin_program" edge to the CoinProgram entity by ID.
func (cppuo *CoinProgramParticipantUpdateOne) SetCoinProgramID(id uuid.UUID) *CoinProgramParticipantUpdateOne {
	cppuo.mutation.SetCoinProgramID(id)
	return cppuo
}

// SetNillableCoinProgramID sets the "coin_program" edge to the CoinProgram entity by ID if the given value is not nil.
func (cppuo *CoinProgramParticipantUpdateOne) SetNillableCoinProgramID(id *uuid.UUID) *CoinProgramParticipantUpdateOne {
	if id != nil {
		cppuo = cppuo.SetCoinProgramID(*id)
	}
	return cppuo
}

// SetCoinProgram sets the "coin_program" edge to the CoinProgram entity.
func (cppuo *CoinProgramParticipantUpdateOne) SetCoinProgram(c *CoinProgram) *CoinProgramParticipantUpdateOne {
	return cppuo.SetCoinProgramID(c.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (cppuo *CoinProgramParticipantUpdateOne) SetUserID(id uuid.UUID) *CoinProgramParticipantUpdateOne {
	cppuo.mutation.SetUserID(id)
	return cppuo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (cppuo *CoinProgramParticipantUpdateOne) SetNillableUserID(id *uuid.UUID) *CoinProgramParticipantUpdateOne {
	if id != nil {
		cppuo = cppuo.SetUserID(*id)
	}
	return cppuo
}

// SetUser sets the "user" edge to the User entity.
func (cppuo *CoinProgramParticipantUpdateOne) SetUser(u *User) *CoinProgramParticipantUpdateOne {
	return cppuo.SetUserID(u.ID)
}

// Mutation returns the CoinProgramParticipantMutation object of the builder.
func (cppuo *CoinProgramParticipantUpdateOne) Mutation() *CoinProgramParticipantMutation {
	return cppuo.mutation
}

// ClearCoinProgram clears the "coin_program" edge to the CoinProgram entity.
func (cppuo *CoinProgramParticipantUpdateOne) ClearCoinProgram() *CoinProgramParticipantUpdateOne {
	cppuo.mutation.ClearCoinProgram()
	return cppuo
}

// ClearUser clears the "user" edge to the User entity.
func (cppuo *CoinProgramParticipantUpdateOne) ClearUser() *CoinProgramParticipantUpdateOne {
	cppuo.mutation.ClearUser()
	return cppuo
}

// Where appends a list predicates to the CoinProgramParticipantUpdate builder.
func (cppuo *CoinProgramParticipantUpdateOne) Where(ps ...predicate.CoinProgramParticipant) *CoinProgramParticipantUpdateOne {
	cppuo.mutation.Where(ps...)
	return cppuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cppuo *CoinProgramParticipantUpdateOne) Select(field string, fields ...string) *CoinProgramParticipantUpdateOne {
	cppuo.fields = append([]string{field}, fields...)
	return cppuo
}

// Save executes the query and returns the updated CoinProgramParticipant entity.
func (cppuo *CoinProgramParticipantUpdateOne) Save(ctx context.Context) (*CoinProgramParticipant, error) {
	return withHooks(ctx, cppuo.sqlSave, cppuo.mutation, cppuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cppuo *CoinProgramParticipantUpdateOne) SaveX(ctx context.Context) *CoinProgramParticipant {
	node, err := cppuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cppuo *CoinProgramParticipantUpdateOne) Exec(ctx context.Context) error {
	_, err := cppuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cppuo *CoinProgramParticipantUpdateOne) ExecX(ctx context.Context) {
	if err := cppuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cppuo *CoinProgramParticipantUpdateOne) sqlSave(ctx context.Context) (_node *CoinProgramParticipant, err error) {
	_spec := sqlgraph.NewUpdateSpec(coinprogramparticipant.Table, coinprogramparticipant.Columns, sqlgraph.NewFieldSpec(coinprogramparticipant.FieldID, field.TypeUUID))
	id, ok := cppuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CoinProgramParticipant.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cppuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, coinprogramparticipant.FieldID)
		for _, f := range fields {
			if !coinprogramparticipant.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != coinprogramparticipant.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cppuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cppuo.mutation.Balance(); ok {
		_spec.SetField(coinprogramparticipant.FieldBalance, field.TypeUint, value)
	}
	if value, ok := cppuo.mutation.AddedBalance(); ok {
		_spec.AddField(coinprogramparticipant.FieldBalance, field.TypeUint, value)
	}
	if cppuo.mutation.CoinProgramCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   coinprogramparticipant.CoinProgramTable,
			Columns: []string{coinprogramparticipant.CoinProgramColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coinprogram.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cppuo.mutation.CoinProgramIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   coinprogramparticipant.CoinProgramTable,
			Columns: []string{coinprogramparticipant.CoinProgramColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coinprogram.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cppuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   coinprogramparticipant.UserTable,
			Columns: []string{coinprogramparticipant.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cppuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   coinprogramparticipant.UserTable,
			Columns: []string{coinprogramparticipant.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CoinProgramParticipant{config: cppuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cppuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{coinprogramparticipant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cppuo.mutation.done = true
	return _node, nil
}

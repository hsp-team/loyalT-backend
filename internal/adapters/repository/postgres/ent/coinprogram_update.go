// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"loyalit/internal/adapters/repository/postgres/ent/business"
	"loyalit/internal/adapters/repository/postgres/ent/coinprogram"
	"loyalit/internal/adapters/repository/postgres/ent/coinprogramparticipant"
	"loyalit/internal/adapters/repository/postgres/ent/predicate"
	"loyalit/internal/adapters/repository/postgres/ent/reward"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// CoinProgramUpdate is the builder for updating CoinProgram entities.
type CoinProgramUpdate struct {
	config
	hooks    []Hook
	mutation *CoinProgramMutation
}

// Where appends a list predicates to the CoinProgramUpdate builder.
func (cpu *CoinProgramUpdate) Where(ps ...predicate.CoinProgram) *CoinProgramUpdate {
	cpu.mutation.Where(ps...)
	return cpu
}

// SetName sets the "name" field.
func (cpu *CoinProgramUpdate) SetName(s string) *CoinProgramUpdate {
	cpu.mutation.SetName(s)
	return cpu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cpu *CoinProgramUpdate) SetNillableName(s *string) *CoinProgramUpdate {
	if s != nil {
		cpu.SetName(*s)
	}
	return cpu
}

// SetDescription sets the "description" field.
func (cpu *CoinProgramUpdate) SetDescription(s string) *CoinProgramUpdate {
	cpu.mutation.SetDescription(s)
	return cpu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cpu *CoinProgramUpdate) SetNillableDescription(s *string) *CoinProgramUpdate {
	if s != nil {
		cpu.SetDescription(*s)
	}
	return cpu
}

// SetDayLimit sets the "day_limit" field.
func (cpu *CoinProgramUpdate) SetDayLimit(u uint) *CoinProgramUpdate {
	cpu.mutation.ResetDayLimit()
	cpu.mutation.SetDayLimit(u)
	return cpu
}

// SetNillableDayLimit sets the "day_limit" field if the given value is not nil.
func (cpu *CoinProgramUpdate) SetNillableDayLimit(u *uint) *CoinProgramUpdate {
	if u != nil {
		cpu.SetDayLimit(*u)
	}
	return cpu
}

// AddDayLimit adds u to the "day_limit" field.
func (cpu *CoinProgramUpdate) AddDayLimit(u int) *CoinProgramUpdate {
	cpu.mutation.AddDayLimit(u)
	return cpu
}

// SetCardColor sets the "card_color" field.
func (cpu *CoinProgramUpdate) SetCardColor(s string) *CoinProgramUpdate {
	cpu.mutation.SetCardColor(s)
	return cpu
}

// SetNillableCardColor sets the "card_color" field if the given value is not nil.
func (cpu *CoinProgramUpdate) SetNillableCardColor(s *string) *CoinProgramUpdate {
	if s != nil {
		cpu.SetCardColor(*s)
	}
	return cpu
}

// SetBusinessID sets the "business" edge to the Business entity by ID.
func (cpu *CoinProgramUpdate) SetBusinessID(id uuid.UUID) *CoinProgramUpdate {
	cpu.mutation.SetBusinessID(id)
	return cpu
}

// SetBusiness sets the "business" edge to the Business entity.
func (cpu *CoinProgramUpdate) SetBusiness(b *Business) *CoinProgramUpdate {
	return cpu.SetBusinessID(b.ID)
}

// AddRewardIDs adds the "rewards" edge to the Reward entity by IDs.
func (cpu *CoinProgramUpdate) AddRewardIDs(ids ...uuid.UUID) *CoinProgramUpdate {
	cpu.mutation.AddRewardIDs(ids...)
	return cpu
}

// AddRewards adds the "rewards" edges to the Reward entity.
func (cpu *CoinProgramUpdate) AddRewards(r ...*Reward) *CoinProgramUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cpu.AddRewardIDs(ids...)
}

// AddParticipantIDs adds the "participants" edge to the CoinProgramParticipant entity by IDs.
func (cpu *CoinProgramUpdate) AddParticipantIDs(ids ...uuid.UUID) *CoinProgramUpdate {
	cpu.mutation.AddParticipantIDs(ids...)
	return cpu
}

// AddParticipants adds the "participants" edges to the CoinProgramParticipant entity.
func (cpu *CoinProgramUpdate) AddParticipants(c ...*CoinProgramParticipant) *CoinProgramUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cpu.AddParticipantIDs(ids...)
}

// Mutation returns the CoinProgramMutation object of the builder.
func (cpu *CoinProgramUpdate) Mutation() *CoinProgramMutation {
	return cpu.mutation
}

// ClearBusiness clears the "business" edge to the Business entity.
func (cpu *CoinProgramUpdate) ClearBusiness() *CoinProgramUpdate {
	cpu.mutation.ClearBusiness()
	return cpu
}

// ClearRewards clears all "rewards" edges to the Reward entity.
func (cpu *CoinProgramUpdate) ClearRewards() *CoinProgramUpdate {
	cpu.mutation.ClearRewards()
	return cpu
}

// RemoveRewardIDs removes the "rewards" edge to Reward entities by IDs.
func (cpu *CoinProgramUpdate) RemoveRewardIDs(ids ...uuid.UUID) *CoinProgramUpdate {
	cpu.mutation.RemoveRewardIDs(ids...)
	return cpu
}

// RemoveRewards removes "rewards" edges to Reward entities.
func (cpu *CoinProgramUpdate) RemoveRewards(r ...*Reward) *CoinProgramUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cpu.RemoveRewardIDs(ids...)
}

// ClearParticipants clears all "participants" edges to the CoinProgramParticipant entity.
func (cpu *CoinProgramUpdate) ClearParticipants() *CoinProgramUpdate {
	cpu.mutation.ClearParticipants()
	return cpu
}

// RemoveParticipantIDs removes the "participants" edge to CoinProgramParticipant entities by IDs.
func (cpu *CoinProgramUpdate) RemoveParticipantIDs(ids ...uuid.UUID) *CoinProgramUpdate {
	cpu.mutation.RemoveParticipantIDs(ids...)
	return cpu
}

// RemoveParticipants removes "participants" edges to CoinProgramParticipant entities.
func (cpu *CoinProgramUpdate) RemoveParticipants(c ...*CoinProgramParticipant) *CoinProgramUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cpu.RemoveParticipantIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cpu *CoinProgramUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cpu.sqlSave, cpu.mutation, cpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cpu *CoinProgramUpdate) SaveX(ctx context.Context) int {
	affected, err := cpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cpu *CoinProgramUpdate) Exec(ctx context.Context) error {
	_, err := cpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpu *CoinProgramUpdate) ExecX(ctx context.Context) {
	if err := cpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cpu *CoinProgramUpdate) check() error {
	if v, ok := cpu.mutation.Name(); ok {
		if err := coinprogram.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "CoinProgram.name": %w`, err)}
		}
	}
	if v, ok := cpu.mutation.DayLimit(); ok {
		if err := coinprogram.DayLimitValidator(v); err != nil {
			return &ValidationError{Name: "day_limit", err: fmt.Errorf(`ent: validator failed for field "CoinProgram.day_limit": %w`, err)}
		}
	}
	if v, ok := cpu.mutation.CardColor(); ok {
		if err := coinprogram.CardColorValidator(v); err != nil {
			return &ValidationError{Name: "card_color", err: fmt.Errorf(`ent: validator failed for field "CoinProgram.card_color": %w`, err)}
		}
	}
	if cpu.mutation.BusinessCleared() && len(cpu.mutation.BusinessIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CoinProgram.business"`)
	}
	return nil
}

func (cpu *CoinProgramUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cpu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(coinprogram.Table, coinprogram.Columns, sqlgraph.NewFieldSpec(coinprogram.FieldID, field.TypeUUID))
	if ps := cpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cpu.mutation.Name(); ok {
		_spec.SetField(coinprogram.FieldName, field.TypeString, value)
	}
	if value, ok := cpu.mutation.Description(); ok {
		_spec.SetField(coinprogram.FieldDescription, field.TypeString, value)
	}
	if value, ok := cpu.mutation.DayLimit(); ok {
		_spec.SetField(coinprogram.FieldDayLimit, field.TypeUint, value)
	}
	if value, ok := cpu.mutation.AddedDayLimit(); ok {
		_spec.AddField(coinprogram.FieldDayLimit, field.TypeUint, value)
	}
	if value, ok := cpu.mutation.CardColor(); ok {
		_spec.SetField(coinprogram.FieldCardColor, field.TypeString, value)
	}
	if cpu.mutation.BusinessCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   coinprogram.BusinessTable,
			Columns: []string{coinprogram.BusinessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cpu.mutation.BusinessIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   coinprogram.BusinessTable,
			Columns: []string{coinprogram.BusinessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cpu.mutation.RewardsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   coinprogram.RewardsTable,
			Columns: []string{coinprogram.RewardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reward.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cpu.mutation.RemovedRewardsIDs(); len(nodes) > 0 && !cpu.mutation.RewardsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   coinprogram.RewardsTable,
			Columns: []string{coinprogram.RewardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reward.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cpu.mutation.RewardsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   coinprogram.RewardsTable,
			Columns: []string{coinprogram.RewardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reward.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cpu.mutation.ParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   coinprogram.ParticipantsTable,
			Columns: []string{coinprogram.ParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coinprogramparticipant.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cpu.mutation.RemovedParticipantsIDs(); len(nodes) > 0 && !cpu.mutation.ParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   coinprogram.ParticipantsTable,
			Columns: []string{coinprogram.ParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coinprogramparticipant.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cpu.mutation.ParticipantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   coinprogram.ParticipantsTable,
			Columns: []string{coinprogram.ParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coinprogramparticipant.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{coinprogram.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cpu.mutation.done = true
	return n, nil
}

// CoinProgramUpdateOne is the builder for updating a single CoinProgram entity.
type CoinProgramUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CoinProgramMutation
}

// SetName sets the "name" field.
func (cpuo *CoinProgramUpdateOne) SetName(s string) *CoinProgramUpdateOne {
	cpuo.mutation.SetName(s)
	return cpuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cpuo *CoinProgramUpdateOne) SetNillableName(s *string) *CoinProgramUpdateOne {
	if s != nil {
		cpuo.SetName(*s)
	}
	return cpuo
}

// SetDescription sets the "description" field.
func (cpuo *CoinProgramUpdateOne) SetDescription(s string) *CoinProgramUpdateOne {
	cpuo.mutation.SetDescription(s)
	return cpuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cpuo *CoinProgramUpdateOne) SetNillableDescription(s *string) *CoinProgramUpdateOne {
	if s != nil {
		cpuo.SetDescription(*s)
	}
	return cpuo
}

// SetDayLimit sets the "day_limit" field.
func (cpuo *CoinProgramUpdateOne) SetDayLimit(u uint) *CoinProgramUpdateOne {
	cpuo.mutation.ResetDayLimit()
	cpuo.mutation.SetDayLimit(u)
	return cpuo
}

// SetNillableDayLimit sets the "day_limit" field if the given value is not nil.
func (cpuo *CoinProgramUpdateOne) SetNillableDayLimit(u *uint) *CoinProgramUpdateOne {
	if u != nil {
		cpuo.SetDayLimit(*u)
	}
	return cpuo
}

// AddDayLimit adds u to the "day_limit" field.
func (cpuo *CoinProgramUpdateOne) AddDayLimit(u int) *CoinProgramUpdateOne {
	cpuo.mutation.AddDayLimit(u)
	return cpuo
}

// SetCardColor sets the "card_color" field.
func (cpuo *CoinProgramUpdateOne) SetCardColor(s string) *CoinProgramUpdateOne {
	cpuo.mutation.SetCardColor(s)
	return cpuo
}

// SetNillableCardColor sets the "card_color" field if the given value is not nil.
func (cpuo *CoinProgramUpdateOne) SetNillableCardColor(s *string) *CoinProgramUpdateOne {
	if s != nil {
		cpuo.SetCardColor(*s)
	}
	return cpuo
}

// SetBusinessID sets the "business" edge to the Business entity by ID.
func (cpuo *CoinProgramUpdateOne) SetBusinessID(id uuid.UUID) *CoinProgramUpdateOne {
	cpuo.mutation.SetBusinessID(id)
	return cpuo
}

// SetBusiness sets the "business" edge to the Business entity.
func (cpuo *CoinProgramUpdateOne) SetBusiness(b *Business) *CoinProgramUpdateOne {
	return cpuo.SetBusinessID(b.ID)
}

// AddRewardIDs adds the "rewards" edge to the Reward entity by IDs.
func (cpuo *CoinProgramUpdateOne) AddRewardIDs(ids ...uuid.UUID) *CoinProgramUpdateOne {
	cpuo.mutation.AddRewardIDs(ids...)
	return cpuo
}

// AddRewards adds the "rewards" edges to the Reward entity.
func (cpuo *CoinProgramUpdateOne) AddRewards(r ...*Reward) *CoinProgramUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cpuo.AddRewardIDs(ids...)
}

// AddParticipantIDs adds the "participants" edge to the CoinProgramParticipant entity by IDs.
func (cpuo *CoinProgramUpdateOne) AddParticipantIDs(ids ...uuid.UUID) *CoinProgramUpdateOne {
	cpuo.mutation.AddParticipantIDs(ids...)
	return cpuo
}

// AddParticipants adds the "participants" edges to the CoinProgramParticipant entity.
func (cpuo *CoinProgramUpdateOne) AddParticipants(c ...*CoinProgramParticipant) *CoinProgramUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cpuo.AddParticipantIDs(ids...)
}

// Mutation returns the CoinProgramMutation object of the builder.
func (cpuo *CoinProgramUpdateOne) Mutation() *CoinProgramMutation {
	return cpuo.mutation
}

// ClearBusiness clears the "business" edge to the Business entity.
func (cpuo *CoinProgramUpdateOne) ClearBusiness() *CoinProgramUpdateOne {
	cpuo.mutation.ClearBusiness()
	return cpuo
}

// ClearRewards clears all "rewards" edges to the Reward entity.
func (cpuo *CoinProgramUpdateOne) ClearRewards() *CoinProgramUpdateOne {
	cpuo.mutation.ClearRewards()
	return cpuo
}

// RemoveRewardIDs removes the "rewards" edge to Reward entities by IDs.
func (cpuo *CoinProgramUpdateOne) RemoveRewardIDs(ids ...uuid.UUID) *CoinProgramUpdateOne {
	cpuo.mutation.RemoveRewardIDs(ids...)
	return cpuo
}

// RemoveRewards removes "rewards" edges to Reward entities.
func (cpuo *CoinProgramUpdateOne) RemoveRewards(r ...*Reward) *CoinProgramUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cpuo.RemoveRewardIDs(ids...)
}

// ClearParticipants clears all "participants" edges to the CoinProgramParticipant entity.
func (cpuo *CoinProgramUpdateOne) ClearParticipants() *CoinProgramUpdateOne {
	cpuo.mutation.ClearParticipants()
	return cpuo
}

// RemoveParticipantIDs removes the "participants" edge to CoinProgramParticipant entities by IDs.
func (cpuo *CoinProgramUpdateOne) RemoveParticipantIDs(ids ...uuid.UUID) *CoinProgramUpdateOne {
	cpuo.mutation.RemoveParticipantIDs(ids...)
	return cpuo
}

// RemoveParticipants removes "participants" edges to CoinProgramParticipant entities.
func (cpuo *CoinProgramUpdateOne) RemoveParticipants(c ...*CoinProgramParticipant) *CoinProgramUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cpuo.RemoveParticipantIDs(ids...)
}

// Where appends a list predicates to the CoinProgramUpdate builder.
func (cpuo *CoinProgramUpdateOne) Where(ps ...predicate.CoinProgram) *CoinProgramUpdateOne {
	cpuo.mutation.Where(ps...)
	return cpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cpuo *CoinProgramUpdateOne) Select(field string, fields ...string) *CoinProgramUpdateOne {
	cpuo.fields = append([]string{field}, fields...)
	return cpuo
}

// Save executes the query and returns the updated CoinProgram entity.
func (cpuo *CoinProgramUpdateOne) Save(ctx context.Context) (*CoinProgram, error) {
	return withHooks(ctx, cpuo.sqlSave, cpuo.mutation, cpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cpuo *CoinProgramUpdateOne) SaveX(ctx context.Context) *CoinProgram {
	node, err := cpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cpuo *CoinProgramUpdateOne) Exec(ctx context.Context) error {
	_, err := cpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpuo *CoinProgramUpdateOne) ExecX(ctx context.Context) {
	if err := cpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cpuo *CoinProgramUpdateOne) check() error {
	if v, ok := cpuo.mutation.Name(); ok {
		if err := coinprogram.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "CoinProgram.name": %w`, err)}
		}
	}
	if v, ok := cpuo.mutation.DayLimit(); ok {
		if err := coinprogram.DayLimitValidator(v); err != nil {
			return &ValidationError{Name: "day_limit", err: fmt.Errorf(`ent: validator failed for field "CoinProgram.day_limit": %w`, err)}
		}
	}
	if v, ok := cpuo.mutation.CardColor(); ok {
		if err := coinprogram.CardColorValidator(v); err != nil {
			return &ValidationError{Name: "card_color", err: fmt.Errorf(`ent: validator failed for field "CoinProgram.card_color": %w`, err)}
		}
	}
	if cpuo.mutation.BusinessCleared() && len(cpuo.mutation.BusinessIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CoinProgram.business"`)
	}
	return nil
}

func (cpuo *CoinProgramUpdateOne) sqlSave(ctx context.Context) (_node *CoinProgram, err error) {
	if err := cpuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(coinprogram.Table, coinprogram.Columns, sqlgraph.NewFieldSpec(coinprogram.FieldID, field.TypeUUID))
	id, ok := cpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CoinProgram.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, coinprogram.FieldID)
		for _, f := range fields {
			if !coinprogram.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != coinprogram.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cpuo.mutation.Name(); ok {
		_spec.SetField(coinprogram.FieldName, field.TypeString, value)
	}
	if value, ok := cpuo.mutation.Description(); ok {
		_spec.SetField(coinprogram.FieldDescription, field.TypeString, value)
	}
	if value, ok := cpuo.mutation.DayLimit(); ok {
		_spec.SetField(coinprogram.FieldDayLimit, field.TypeUint, value)
	}
	if value, ok := cpuo.mutation.AddedDayLimit(); ok {
		_spec.AddField(coinprogram.FieldDayLimit, field.TypeUint, value)
	}
	if value, ok := cpuo.mutation.CardColor(); ok {
		_spec.SetField(coinprogram.FieldCardColor, field.TypeString, value)
	}
	if cpuo.mutation.BusinessCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   coinprogram.BusinessTable,
			Columns: []string{coinprogram.BusinessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cpuo.mutation.BusinessIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   coinprogram.BusinessTable,
			Columns: []string{coinprogram.BusinessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cpuo.mutation.RewardsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   coinprogram.RewardsTable,
			Columns: []string{coinprogram.RewardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reward.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cpuo.mutation.RemovedRewardsIDs(); len(nodes) > 0 && !cpuo.mutation.RewardsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   coinprogram.RewardsTable,
			Columns: []string{coinprogram.RewardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reward.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cpuo.mutation.RewardsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   coinprogram.RewardsTable,
			Columns: []string{coinprogram.RewardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reward.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cpuo.mutation.ParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   coinprogram.ParticipantsTable,
			Columns: []string{coinprogram.ParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coinprogramparticipant.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cpuo.mutation.RemovedParticipantsIDs(); len(nodes) > 0 && !cpuo.mutation.ParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   coinprogram.ParticipantsTable,
			Columns: []string{coinprogram.ParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coinprogramparticipant.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cpuo.mutation.ParticipantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   coinprogram.ParticipantsTable,
			Columns: []string{coinprogram.ParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coinprogramparticipant.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CoinProgram{config: cpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{coinprogram.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cpuo.mutation.done = true
	return _node, nil
}

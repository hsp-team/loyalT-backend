// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"loyalit/internal/adapters/repository/postgres/ent/business"
	"loyalit/internal/adapters/repository/postgres/ent/coinprogram"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// CoinProgram is the model entity for the CoinProgram schema.
type CoinProgram struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// DayLimit holds the value of the "day_limit" field.
	DayLimit uint `json:"day_limit,omitempty"`
	// CardColor holds the value of the "card_color" field.
	CardColor string `json:"card_color,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CoinProgramQuery when eager-loading is set.
	Edges                 CoinProgramEdges `json:"edges"`
	business_coin_program *uuid.UUID
	selectValues          sql.SelectValues
}

// CoinProgramEdges holds the relations/edges for other nodes in the graph.
type CoinProgramEdges struct {
	// Business holds the value of the business edge.
	Business *Business `json:"business,omitempty"`
	// Rewards holds the value of the rewards edge.
	Rewards []*Reward `json:"rewards,omitempty"`
	// Participants holds the value of the participants edge.
	Participants []*CoinProgramParticipant `json:"participants,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// BusinessOrErr returns the Business value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CoinProgramEdges) BusinessOrErr() (*Business, error) {
	if e.Business != nil {
		return e.Business, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: business.Label}
	}
	return nil, &NotLoadedError{edge: "business"}
}

// RewardsOrErr returns the Rewards value or an error if the edge
// was not loaded in eager-loading.
func (e CoinProgramEdges) RewardsOrErr() ([]*Reward, error) {
	if e.loadedTypes[1] {
		return e.Rewards, nil
	}
	return nil, &NotLoadedError{edge: "rewards"}
}

// ParticipantsOrErr returns the Participants value or an error if the edge
// was not loaded in eager-loading.
func (e CoinProgramEdges) ParticipantsOrErr() ([]*CoinProgramParticipant, error) {
	if e.loadedTypes[2] {
		return e.Participants, nil
	}
	return nil, &NotLoadedError{edge: "participants"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CoinProgram) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case coinprogram.FieldDayLimit:
			values[i] = new(sql.NullInt64)
		case coinprogram.FieldName, coinprogram.FieldDescription, coinprogram.FieldCardColor:
			values[i] = new(sql.NullString)
		case coinprogram.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case coinprogram.FieldID:
			values[i] = new(uuid.UUID)
		case coinprogram.ForeignKeys[0]: // business_coin_program
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CoinProgram fields.
func (cp *CoinProgram) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case coinprogram.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				cp.ID = *value
			}
		case coinprogram.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cp.CreatedAt = value.Time
			}
		case coinprogram.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				cp.Name = value.String
			}
		case coinprogram.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				cp.Description = value.String
			}
		case coinprogram.FieldDayLimit:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field day_limit", values[i])
			} else if value.Valid {
				cp.DayLimit = uint(value.Int64)
			}
		case coinprogram.FieldCardColor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field card_color", values[i])
			} else if value.Valid {
				cp.CardColor = value.String
			}
		case coinprogram.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field business_coin_program", values[i])
			} else if value.Valid {
				cp.business_coin_program = new(uuid.UUID)
				*cp.business_coin_program = *value.S.(*uuid.UUID)
			}
		default:
			cp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CoinProgram.
// This includes values selected through modifiers, order, etc.
func (cp *CoinProgram) Value(name string) (ent.Value, error) {
	return cp.selectValues.Get(name)
}

// QueryBusiness queries the "business" edge of the CoinProgram entity.
func (cp *CoinProgram) QueryBusiness() *BusinessQuery {
	return NewCoinProgramClient(cp.config).QueryBusiness(cp)
}

// QueryRewards queries the "rewards" edge of the CoinProgram entity.
func (cp *CoinProgram) QueryRewards() *RewardQuery {
	return NewCoinProgramClient(cp.config).QueryRewards(cp)
}

// QueryParticipants queries the "participants" edge of the CoinProgram entity.
func (cp *CoinProgram) QueryParticipants() *CoinProgramParticipantQuery {
	return NewCoinProgramClient(cp.config).QueryParticipants(cp)
}

// Update returns a builder for updating this CoinProgram.
// Note that you need to call CoinProgram.Unwrap() before calling this method if this CoinProgram
// was returned from a transaction, and the transaction was committed or rolled back.
func (cp *CoinProgram) Update() *CoinProgramUpdateOne {
	return NewCoinProgramClient(cp.config).UpdateOne(cp)
}

// Unwrap unwraps the CoinProgram entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cp *CoinProgram) Unwrap() *CoinProgram {
	_tx, ok := cp.config.driver.(*txDriver)
	if !ok {
		panic("ent: CoinProgram is not a transactional entity")
	}
	cp.config.driver = _tx.drv
	return cp
}

// String implements the fmt.Stringer.
func (cp *CoinProgram) String() string {
	var builder strings.Builder
	builder.WriteString("CoinProgram(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cp.ID))
	builder.WriteString("created_at=")
	builder.WriteString(cp.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(cp.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(cp.Description)
	builder.WriteString(", ")
	builder.WriteString("day_limit=")
	builder.WriteString(fmt.Sprintf("%v", cp.DayLimit))
	builder.WriteString(", ")
	builder.WriteString("card_color=")
	builder.WriteString(cp.CardColor)
	builder.WriteByte(')')
	return builder.String()
}

// CoinPrograms is a parsable slice of CoinProgram.
type CoinPrograms []*CoinProgram

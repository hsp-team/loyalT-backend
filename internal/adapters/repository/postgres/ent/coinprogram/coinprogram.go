// Code generated by ent, DO NOT EDIT.

package coinprogram

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the coinprogram type in the database.
	Label = "coin_program"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldDayLimit holds the string denoting the day_limit field in the database.
	FieldDayLimit = "day_limit"
	// FieldCardColor holds the string denoting the card_color field in the database.
	FieldCardColor = "card_color"
	// EdgeBusiness holds the string denoting the business edge name in mutations.
	EdgeBusiness = "business"
	// EdgeRewards holds the string denoting the rewards edge name in mutations.
	EdgeRewards = "rewards"
	// EdgeParticipants holds the string denoting the participants edge name in mutations.
	EdgeParticipants = "participants"
	// Table holds the table name of the coinprogram in the database.
	Table = "coin_programs"
	// BusinessTable is the table that holds the business relation/edge.
	BusinessTable = "coin_programs"
	// BusinessInverseTable is the table name for the Business entity.
	// It exists in this package in order to avoid circular dependency with the "business" package.
	BusinessInverseTable = "businesses"
	// BusinessColumn is the table column denoting the business relation/edge.
	BusinessColumn = "business_coin_program"
	// RewardsTable is the table that holds the rewards relation/edge.
	RewardsTable = "rewards"
	// RewardsInverseTable is the table name for the Reward entity.
	// It exists in this package in order to avoid circular dependency with the "reward" package.
	RewardsInverseTable = "rewards"
	// RewardsColumn is the table column denoting the rewards relation/edge.
	RewardsColumn = "coin_program_rewards"
	// ParticipantsTable is the table that holds the participants relation/edge.
	ParticipantsTable = "coin_program_participants"
	// ParticipantsInverseTable is the table name for the CoinProgramParticipant entity.
	// It exists in this package in order to avoid circular dependency with the "coinprogramparticipant" package.
	ParticipantsInverseTable = "coin_program_participants"
	// ParticipantsColumn is the table column denoting the participants relation/edge.
	ParticipantsColumn = "coin_program_participant_coin_program"
)

// Columns holds all SQL columns for coinprogram fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldName,
	FieldDescription,
	FieldDayLimit,
	FieldCardColor,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "coin_programs"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"business_coin_program",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt time.Time
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultDayLimit holds the default value on creation for the "day_limit" field.
	DefaultDayLimit uint
	// DayLimitValidator is a validator for the "day_limit" field. It is called by the builders before save.
	DayLimitValidator func(uint) error
	// CardColorValidator is a validator for the "card_color" field. It is called by the builders before save.
	CardColorValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the CoinProgram queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByDayLimit orders the results by the day_limit field.
func ByDayLimit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDayLimit, opts...).ToFunc()
}

// ByCardColor orders the results by the card_color field.
func ByCardColor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCardColor, opts...).ToFunc()
}

// ByBusinessField orders the results by business field.
func ByBusinessField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBusinessStep(), sql.OrderByField(field, opts...))
	}
}

// ByRewardsCount orders the results by rewards count.
func ByRewardsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRewardsStep(), opts...)
	}
}

// ByRewards orders the results by rewards terms.
func ByRewards(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRewardsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByParticipantsCount orders the results by participants count.
func ByParticipantsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newParticipantsStep(), opts...)
	}
}

// ByParticipants orders the results by participants terms.
func ByParticipants(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newParticipantsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newBusinessStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BusinessInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, BusinessTable, BusinessColumn),
	)
}
func newRewardsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RewardsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RewardsTable, RewardsColumn),
	)
}
func newParticipantsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ParticipantsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, ParticipantsTable, ParticipantsColumn),
	)
}

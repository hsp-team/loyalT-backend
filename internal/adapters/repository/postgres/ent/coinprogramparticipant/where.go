// Code generated by ent, DO NOT EDIT.

package coinprogramparticipant

import (
	"loyalit/internal/adapters/repository/postgres/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.CoinProgramParticipant {
	return predicate.CoinProgramParticipant(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.CoinProgramParticipant {
	return predicate.CoinProgramParticipant(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.CoinProgramParticipant {
	return predicate.CoinProgramParticipant(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.CoinProgramParticipant {
	return predicate.CoinProgramParticipant(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.CoinProgramParticipant {
	return predicate.CoinProgramParticipant(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.CoinProgramParticipant {
	return predicate.CoinProgramParticipant(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.CoinProgramParticipant {
	return predicate.CoinProgramParticipant(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.CoinProgramParticipant {
	return predicate.CoinProgramParticipant(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.CoinProgramParticipant {
	return predicate.CoinProgramParticipant(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.CoinProgramParticipant {
	return predicate.CoinProgramParticipant(sql.FieldEQ(FieldCreatedAt, v))
}

// Balance applies equality check predicate on the "balance" field. It's identical to BalanceEQ.
func Balance(v uint) predicate.CoinProgramParticipant {
	return predicate.CoinProgramParticipant(sql.FieldEQ(FieldBalance, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.CoinProgramParticipant {
	return predicate.CoinProgramParticipant(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.CoinProgramParticipant {
	return predicate.CoinProgramParticipant(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.CoinProgramParticipant {
	return predicate.CoinProgramParticipant(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.CoinProgramParticipant {
	return predicate.CoinProgramParticipant(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.CoinProgramParticipant {
	return predicate.CoinProgramParticipant(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.CoinProgramParticipant {
	return predicate.CoinProgramParticipant(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.CoinProgramParticipant {
	return predicate.CoinProgramParticipant(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.CoinProgramParticipant {
	return predicate.CoinProgramParticipant(sql.FieldLTE(FieldCreatedAt, v))
}

// BalanceEQ applies the EQ predicate on the "balance" field.
func BalanceEQ(v uint) predicate.CoinProgramParticipant {
	return predicate.CoinProgramParticipant(sql.FieldEQ(FieldBalance, v))
}

// BalanceNEQ applies the NEQ predicate on the "balance" field.
func BalanceNEQ(v uint) predicate.CoinProgramParticipant {
	return predicate.CoinProgramParticipant(sql.FieldNEQ(FieldBalance, v))
}

// BalanceIn applies the In predicate on the "balance" field.
func BalanceIn(vs ...uint) predicate.CoinProgramParticipant {
	return predicate.CoinProgramParticipant(sql.FieldIn(FieldBalance, vs...))
}

// BalanceNotIn applies the NotIn predicate on the "balance" field.
func BalanceNotIn(vs ...uint) predicate.CoinProgramParticipant {
	return predicate.CoinProgramParticipant(sql.FieldNotIn(FieldBalance, vs...))
}

// BalanceGT applies the GT predicate on the "balance" field.
func BalanceGT(v uint) predicate.CoinProgramParticipant {
	return predicate.CoinProgramParticipant(sql.FieldGT(FieldBalance, v))
}

// BalanceGTE applies the GTE predicate on the "balance" field.
func BalanceGTE(v uint) predicate.CoinProgramParticipant {
	return predicate.CoinProgramParticipant(sql.FieldGTE(FieldBalance, v))
}

// BalanceLT applies the LT predicate on the "balance" field.
func BalanceLT(v uint) predicate.CoinProgramParticipant {
	return predicate.CoinProgramParticipant(sql.FieldLT(FieldBalance, v))
}

// BalanceLTE applies the LTE predicate on the "balance" field.
func BalanceLTE(v uint) predicate.CoinProgramParticipant {
	return predicate.CoinProgramParticipant(sql.FieldLTE(FieldBalance, v))
}

// HasCoinProgram applies the HasEdge predicate on the "coin_program" edge.
func HasCoinProgram() predicate.CoinProgramParticipant {
	return predicate.CoinProgramParticipant(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CoinProgramTable, CoinProgramColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCoinProgramWith applies the HasEdge predicate on the "coin_program" edge with a given conditions (other predicates).
func HasCoinProgramWith(preds ...predicate.CoinProgram) predicate.CoinProgramParticipant {
	return predicate.CoinProgramParticipant(func(s *sql.Selector) {
		step := newCoinProgramStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.CoinProgramParticipant {
	return predicate.CoinProgramParticipant(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.CoinProgramParticipant {
	return predicate.CoinProgramParticipant(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CoinProgramParticipant) predicate.CoinProgramParticipant {
	return predicate.CoinProgramParticipant(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CoinProgramParticipant) predicate.CoinProgramParticipant {
	return predicate.CoinProgramParticipant(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CoinProgramParticipant) predicate.CoinProgramParticipant {
	return predicate.CoinProgramParticipant(sql.NotPredicates(p))
}

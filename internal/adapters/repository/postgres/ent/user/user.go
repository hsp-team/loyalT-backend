// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldQrData holds the string denoting the qr_data field in the database.
	FieldQrData = "qr_data"
	// EdgeCoupons holds the string denoting the coupons edge name in mutations.
	EdgeCoupons = "coupons"
	// EdgeCoinPrograms holds the string denoting the coin_programs edge name in mutations.
	EdgeCoinPrograms = "coin_programs"
	// Table holds the table name of the user in the database.
	Table = "users"
	// CouponsTable is the table that holds the coupons relation/edge.
	CouponsTable = "coupons"
	// CouponsInverseTable is the table name for the Coupon entity.
	// It exists in this package in order to avoid circular dependency with the "coupon" package.
	CouponsInverseTable = "coupons"
	// CouponsColumn is the table column denoting the coupons relation/edge.
	CouponsColumn = "user_coupons"
	// CoinProgramsTable is the table that holds the coin_programs relation/edge.
	CoinProgramsTable = "coin_program_participants"
	// CoinProgramsInverseTable is the table name for the CoinProgramParticipant entity.
	// It exists in this package in order to avoid circular dependency with the "coinprogramparticipant" package.
	CoinProgramsInverseTable = "coin_program_participants"
	// CoinProgramsColumn is the table column denoting the coin_programs relation/edge.
	CoinProgramsColumn = "user_coin_programs"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldName,
	FieldEmail,
	FieldPassword,
	FieldQrData,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt time.Time
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
	// PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	PasswordValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByPassword orders the results by the password field.
func ByPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassword, opts...).ToFunc()
}

// ByQrData orders the results by the qr_data field.
func ByQrData(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQrData, opts...).ToFunc()
}

// ByCouponsCount orders the results by coupons count.
func ByCouponsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCouponsStep(), opts...)
	}
}

// ByCoupons orders the results by coupons terms.
func ByCoupons(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCouponsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCoinProgramsCount orders the results by coin_programs count.
func ByCoinProgramsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCoinProgramsStep(), opts...)
	}
}

// ByCoinPrograms orders the results by coin_programs terms.
func ByCoinPrograms(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCoinProgramsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCouponsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CouponsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CouponsTable, CouponsColumn),
	)
}
func newCoinProgramsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CoinProgramsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CoinProgramsTable, CoinProgramsColumn),
	)
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"loyalit/internal/adapters/repository/postgres/ent/coinprogram"
	"loyalit/internal/adapters/repository/postgres/ent/coupon"
	"loyalit/internal/adapters/repository/postgres/ent/predicate"
	"loyalit/internal/adapters/repository/postgres/ent/reward"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// RewardUpdate is the builder for updating Reward entities.
type RewardUpdate struct {
	config
	hooks    []Hook
	mutation *RewardMutation
}

// Where appends a list predicates to the RewardUpdate builder.
func (ru *RewardUpdate) Where(ps ...predicate.Reward) *RewardUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetName sets the "name" field.
func (ru *RewardUpdate) SetName(s string) *RewardUpdate {
	ru.mutation.SetName(s)
	return ru
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ru *RewardUpdate) SetNillableName(s *string) *RewardUpdate {
	if s != nil {
		ru.SetName(*s)
	}
	return ru
}

// SetDescription sets the "description" field.
func (ru *RewardUpdate) SetDescription(s string) *RewardUpdate {
	ru.mutation.SetDescription(s)
	return ru
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ru *RewardUpdate) SetNillableDescription(s *string) *RewardUpdate {
	if s != nil {
		ru.SetDescription(*s)
	}
	return ru
}

// SetCost sets the "cost" field.
func (ru *RewardUpdate) SetCost(u uint) *RewardUpdate {
	ru.mutation.ResetCost()
	ru.mutation.SetCost(u)
	return ru
}

// SetNillableCost sets the "cost" field if the given value is not nil.
func (ru *RewardUpdate) SetNillableCost(u *uint) *RewardUpdate {
	if u != nil {
		ru.SetCost(*u)
	}
	return ru
}

// AddCost adds u to the "cost" field.
func (ru *RewardUpdate) AddCost(u int) *RewardUpdate {
	ru.mutation.AddCost(u)
	return ru
}

// SetImageURL sets the "image_url" field.
func (ru *RewardUpdate) SetImageURL(s string) *RewardUpdate {
	ru.mutation.SetImageURL(s)
	return ru
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (ru *RewardUpdate) SetNillableImageURL(s *string) *RewardUpdate {
	if s != nil {
		ru.SetImageURL(*s)
	}
	return ru
}

// SetCoinProgramID sets the "coin_program" edge to the CoinProgram entity by ID.
func (ru *RewardUpdate) SetCoinProgramID(id uuid.UUID) *RewardUpdate {
	ru.mutation.SetCoinProgramID(id)
	return ru
}

// SetNillableCoinProgramID sets the "coin_program" edge to the CoinProgram entity by ID if the given value is not nil.
func (ru *RewardUpdate) SetNillableCoinProgramID(id *uuid.UUID) *RewardUpdate {
	if id != nil {
		ru = ru.SetCoinProgramID(*id)
	}
	return ru
}

// SetCoinProgram sets the "coin_program" edge to the CoinProgram entity.
func (ru *RewardUpdate) SetCoinProgram(c *CoinProgram) *RewardUpdate {
	return ru.SetCoinProgramID(c.ID)
}

// AddRewardIDs adds the "rewards" edge to the Coupon entity by IDs.
func (ru *RewardUpdate) AddRewardIDs(ids ...uuid.UUID) *RewardUpdate {
	ru.mutation.AddRewardIDs(ids...)
	return ru
}

// AddRewards adds the "rewards" edges to the Coupon entity.
func (ru *RewardUpdate) AddRewards(c ...*Coupon) *RewardUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ru.AddRewardIDs(ids...)
}

// Mutation returns the RewardMutation object of the builder.
func (ru *RewardUpdate) Mutation() *RewardMutation {
	return ru.mutation
}

// ClearCoinProgram clears the "coin_program" edge to the CoinProgram entity.
func (ru *RewardUpdate) ClearCoinProgram() *RewardUpdate {
	ru.mutation.ClearCoinProgram()
	return ru
}

// ClearRewards clears all "rewards" edges to the Coupon entity.
func (ru *RewardUpdate) ClearRewards() *RewardUpdate {
	ru.mutation.ClearRewards()
	return ru
}

// RemoveRewardIDs removes the "rewards" edge to Coupon entities by IDs.
func (ru *RewardUpdate) RemoveRewardIDs(ids ...uuid.UUID) *RewardUpdate {
	ru.mutation.RemoveRewardIDs(ids...)
	return ru
}

// RemoveRewards removes "rewards" edges to Coupon entities.
func (ru *RewardUpdate) RemoveRewards(c ...*Coupon) *RewardUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ru.RemoveRewardIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RewardUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RewardUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RewardUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RewardUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *RewardUpdate) check() error {
	if v, ok := ru.mutation.Name(); ok {
		if err := reward.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Reward.name": %w`, err)}
		}
	}
	if v, ok := ru.mutation.Cost(); ok {
		if err := reward.CostValidator(v); err != nil {
			return &ValidationError{Name: "cost", err: fmt.Errorf(`ent: validator failed for field "Reward.cost": %w`, err)}
		}
	}
	if v, ok := ru.mutation.ImageURL(); ok {
		if err := reward.ImageURLValidator(v); err != nil {
			return &ValidationError{Name: "image_url", err: fmt.Errorf(`ent: validator failed for field "Reward.image_url": %w`, err)}
		}
	}
	return nil
}

func (ru *RewardUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(reward.Table, reward.Columns, sqlgraph.NewFieldSpec(reward.FieldID, field.TypeUUID))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.Name(); ok {
		_spec.SetField(reward.FieldName, field.TypeString, value)
	}
	if value, ok := ru.mutation.Description(); ok {
		_spec.SetField(reward.FieldDescription, field.TypeString, value)
	}
	if value, ok := ru.mutation.Cost(); ok {
		_spec.SetField(reward.FieldCost, field.TypeUint, value)
	}
	if value, ok := ru.mutation.AddedCost(); ok {
		_spec.AddField(reward.FieldCost, field.TypeUint, value)
	}
	if value, ok := ru.mutation.ImageURL(); ok {
		_spec.SetField(reward.FieldImageURL, field.TypeString, value)
	}
	if ru.mutation.CoinProgramCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reward.CoinProgramTable,
			Columns: []string{reward.CoinProgramColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coinprogram.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.CoinProgramIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reward.CoinProgramTable,
			Columns: []string{reward.CoinProgramColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coinprogram.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.RewardsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   reward.RewardsTable,
			Columns: []string{reward.RewardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coupon.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedRewardsIDs(); len(nodes) > 0 && !ru.mutation.RewardsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   reward.RewardsTable,
			Columns: []string{reward.RewardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coupon.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RewardsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   reward.RewardsTable,
			Columns: []string{reward.RewardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coupon.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reward.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// RewardUpdateOne is the builder for updating a single Reward entity.
type RewardUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RewardMutation
}

// SetName sets the "name" field.
func (ruo *RewardUpdateOne) SetName(s string) *RewardUpdateOne {
	ruo.mutation.SetName(s)
	return ruo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ruo *RewardUpdateOne) SetNillableName(s *string) *RewardUpdateOne {
	if s != nil {
		ruo.SetName(*s)
	}
	return ruo
}

// SetDescription sets the "description" field.
func (ruo *RewardUpdateOne) SetDescription(s string) *RewardUpdateOne {
	ruo.mutation.SetDescription(s)
	return ruo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ruo *RewardUpdateOne) SetNillableDescription(s *string) *RewardUpdateOne {
	if s != nil {
		ruo.SetDescription(*s)
	}
	return ruo
}

// SetCost sets the "cost" field.
func (ruo *RewardUpdateOne) SetCost(u uint) *RewardUpdateOne {
	ruo.mutation.ResetCost()
	ruo.mutation.SetCost(u)
	return ruo
}

// SetNillableCost sets the "cost" field if the given value is not nil.
func (ruo *RewardUpdateOne) SetNillableCost(u *uint) *RewardUpdateOne {
	if u != nil {
		ruo.SetCost(*u)
	}
	return ruo
}

// AddCost adds u to the "cost" field.
func (ruo *RewardUpdateOne) AddCost(u int) *RewardUpdateOne {
	ruo.mutation.AddCost(u)
	return ruo
}

// SetImageURL sets the "image_url" field.
func (ruo *RewardUpdateOne) SetImageURL(s string) *RewardUpdateOne {
	ruo.mutation.SetImageURL(s)
	return ruo
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (ruo *RewardUpdateOne) SetNillableImageURL(s *string) *RewardUpdateOne {
	if s != nil {
		ruo.SetImageURL(*s)
	}
	return ruo
}

// SetCoinProgramID sets the "coin_program" edge to the CoinProgram entity by ID.
func (ruo *RewardUpdateOne) SetCoinProgramID(id uuid.UUID) *RewardUpdateOne {
	ruo.mutation.SetCoinProgramID(id)
	return ruo
}

// SetNillableCoinProgramID sets the "coin_program" edge to the CoinProgram entity by ID if the given value is not nil.
func (ruo *RewardUpdateOne) SetNillableCoinProgramID(id *uuid.UUID) *RewardUpdateOne {
	if id != nil {
		ruo = ruo.SetCoinProgramID(*id)
	}
	return ruo
}

// SetCoinProgram sets the "coin_program" edge to the CoinProgram entity.
func (ruo *RewardUpdateOne) SetCoinProgram(c *CoinProgram) *RewardUpdateOne {
	return ruo.SetCoinProgramID(c.ID)
}

// AddRewardIDs adds the "rewards" edge to the Coupon entity by IDs.
func (ruo *RewardUpdateOne) AddRewardIDs(ids ...uuid.UUID) *RewardUpdateOne {
	ruo.mutation.AddRewardIDs(ids...)
	return ruo
}

// AddRewards adds the "rewards" edges to the Coupon entity.
func (ruo *RewardUpdateOne) AddRewards(c ...*Coupon) *RewardUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ruo.AddRewardIDs(ids...)
}

// Mutation returns the RewardMutation object of the builder.
func (ruo *RewardUpdateOne) Mutation() *RewardMutation {
	return ruo.mutation
}

// ClearCoinProgram clears the "coin_program" edge to the CoinProgram entity.
func (ruo *RewardUpdateOne) ClearCoinProgram() *RewardUpdateOne {
	ruo.mutation.ClearCoinProgram()
	return ruo
}

// ClearRewards clears all "rewards" edges to the Coupon entity.
func (ruo *RewardUpdateOne) ClearRewards() *RewardUpdateOne {
	ruo.mutation.ClearRewards()
	return ruo
}

// RemoveRewardIDs removes the "rewards" edge to Coupon entities by IDs.
func (ruo *RewardUpdateOne) RemoveRewardIDs(ids ...uuid.UUID) *RewardUpdateOne {
	ruo.mutation.RemoveRewardIDs(ids...)
	return ruo
}

// RemoveRewards removes "rewards" edges to Coupon entities.
func (ruo *RewardUpdateOne) RemoveRewards(c ...*Coupon) *RewardUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ruo.RemoveRewardIDs(ids...)
}

// Where appends a list predicates to the RewardUpdate builder.
func (ruo *RewardUpdateOne) Where(ps ...predicate.Reward) *RewardUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RewardUpdateOne) Select(field string, fields ...string) *RewardUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Reward entity.
func (ruo *RewardUpdateOne) Save(ctx context.Context) (*Reward, error) {
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RewardUpdateOne) SaveX(ctx context.Context) *Reward {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RewardUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RewardUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *RewardUpdateOne) check() error {
	if v, ok := ruo.mutation.Name(); ok {
		if err := reward.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Reward.name": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.Cost(); ok {
		if err := reward.CostValidator(v); err != nil {
			return &ValidationError{Name: "cost", err: fmt.Errorf(`ent: validator failed for field "Reward.cost": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.ImageURL(); ok {
		if err := reward.ImageURLValidator(v); err != nil {
			return &ValidationError{Name: "image_url", err: fmt.Errorf(`ent: validator failed for field "Reward.image_url": %w`, err)}
		}
	}
	return nil
}

func (ruo *RewardUpdateOne) sqlSave(ctx context.Context) (_node *Reward, err error) {
	if err := ruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(reward.Table, reward.Columns, sqlgraph.NewFieldSpec(reward.FieldID, field.TypeUUID))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Reward.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, reward.FieldID)
		for _, f := range fields {
			if !reward.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != reward.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.Name(); ok {
		_spec.SetField(reward.FieldName, field.TypeString, value)
	}
	if value, ok := ruo.mutation.Description(); ok {
		_spec.SetField(reward.FieldDescription, field.TypeString, value)
	}
	if value, ok := ruo.mutation.Cost(); ok {
		_spec.SetField(reward.FieldCost, field.TypeUint, value)
	}
	if value, ok := ruo.mutation.AddedCost(); ok {
		_spec.AddField(reward.FieldCost, field.TypeUint, value)
	}
	if value, ok := ruo.mutation.ImageURL(); ok {
		_spec.SetField(reward.FieldImageURL, field.TypeString, value)
	}
	if ruo.mutation.CoinProgramCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reward.CoinProgramTable,
			Columns: []string{reward.CoinProgramColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coinprogram.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.CoinProgramIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reward.CoinProgramTable,
			Columns: []string{reward.CoinProgramColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coinprogram.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.RewardsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   reward.RewardsTable,
			Columns: []string{reward.RewardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coupon.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedRewardsIDs(); len(nodes) > 0 && !ruo.mutation.RewardsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   reward.RewardsTable,
			Columns: []string{reward.RewardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coupon.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RewardsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   reward.RewardsTable,
			Columns: []string{reward.RewardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coupon.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Reward{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reward.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}

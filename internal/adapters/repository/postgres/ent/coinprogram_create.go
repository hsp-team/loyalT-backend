// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"loyalit/internal/adapters/repository/postgres/ent/business"
	"loyalit/internal/adapters/repository/postgres/ent/coinprogram"
	"loyalit/internal/adapters/repository/postgres/ent/coinprogramparticipant"
	"loyalit/internal/adapters/repository/postgres/ent/reward"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// CoinProgramCreate is the builder for creating a CoinProgram entity.
type CoinProgramCreate struct {
	config
	mutation *CoinProgramMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (cpc *CoinProgramCreate) SetCreatedAt(t time.Time) *CoinProgramCreate {
	cpc.mutation.SetCreatedAt(t)
	return cpc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cpc *CoinProgramCreate) SetNillableCreatedAt(t *time.Time) *CoinProgramCreate {
	if t != nil {
		cpc.SetCreatedAt(*t)
	}
	return cpc
}

// SetName sets the "name" field.
func (cpc *CoinProgramCreate) SetName(s string) *CoinProgramCreate {
	cpc.mutation.SetName(s)
	return cpc
}

// SetDescription sets the "description" field.
func (cpc *CoinProgramCreate) SetDescription(s string) *CoinProgramCreate {
	cpc.mutation.SetDescription(s)
	return cpc
}

// SetDayLimit sets the "day_limit" field.
func (cpc *CoinProgramCreate) SetDayLimit(u uint) *CoinProgramCreate {
	cpc.mutation.SetDayLimit(u)
	return cpc
}

// SetNillableDayLimit sets the "day_limit" field if the given value is not nil.
func (cpc *CoinProgramCreate) SetNillableDayLimit(u *uint) *CoinProgramCreate {
	if u != nil {
		cpc.SetDayLimit(*u)
	}
	return cpc
}

// SetCardColor sets the "card_color" field.
func (cpc *CoinProgramCreate) SetCardColor(s string) *CoinProgramCreate {
	cpc.mutation.SetCardColor(s)
	return cpc
}

// SetID sets the "id" field.
func (cpc *CoinProgramCreate) SetID(u uuid.UUID) *CoinProgramCreate {
	cpc.mutation.SetID(u)
	return cpc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cpc *CoinProgramCreate) SetNillableID(u *uuid.UUID) *CoinProgramCreate {
	if u != nil {
		cpc.SetID(*u)
	}
	return cpc
}

// SetBusinessID sets the "business" edge to the Business entity by ID.
func (cpc *CoinProgramCreate) SetBusinessID(id uuid.UUID) *CoinProgramCreate {
	cpc.mutation.SetBusinessID(id)
	return cpc
}

// SetBusiness sets the "business" edge to the Business entity.
func (cpc *CoinProgramCreate) SetBusiness(b *Business) *CoinProgramCreate {
	return cpc.SetBusinessID(b.ID)
}

// AddRewardIDs adds the "rewards" edge to the Reward entity by IDs.
func (cpc *CoinProgramCreate) AddRewardIDs(ids ...uuid.UUID) *CoinProgramCreate {
	cpc.mutation.AddRewardIDs(ids...)
	return cpc
}

// AddRewards adds the "rewards" edges to the Reward entity.
func (cpc *CoinProgramCreate) AddRewards(r ...*Reward) *CoinProgramCreate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cpc.AddRewardIDs(ids...)
}

// AddParticipantIDs adds the "participants" edge to the CoinProgramParticipant entity by IDs.
func (cpc *CoinProgramCreate) AddParticipantIDs(ids ...uuid.UUID) *CoinProgramCreate {
	cpc.mutation.AddParticipantIDs(ids...)
	return cpc
}

// AddParticipants adds the "participants" edges to the CoinProgramParticipant entity.
func (cpc *CoinProgramCreate) AddParticipants(c ...*CoinProgramParticipant) *CoinProgramCreate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cpc.AddParticipantIDs(ids...)
}

// Mutation returns the CoinProgramMutation object of the builder.
func (cpc *CoinProgramCreate) Mutation() *CoinProgramMutation {
	return cpc.mutation
}

// Save creates the CoinProgram in the database.
func (cpc *CoinProgramCreate) Save(ctx context.Context) (*CoinProgram, error) {
	cpc.defaults()
	return withHooks(ctx, cpc.sqlSave, cpc.mutation, cpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cpc *CoinProgramCreate) SaveX(ctx context.Context) *CoinProgram {
	v, err := cpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cpc *CoinProgramCreate) Exec(ctx context.Context) error {
	_, err := cpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpc *CoinProgramCreate) ExecX(ctx context.Context) {
	if err := cpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cpc *CoinProgramCreate) defaults() {
	if _, ok := cpc.mutation.CreatedAt(); !ok {
		v := coinprogram.DefaultCreatedAt
		cpc.mutation.SetCreatedAt(v)
	}
	if _, ok := cpc.mutation.DayLimit(); !ok {
		v := coinprogram.DefaultDayLimit
		cpc.mutation.SetDayLimit(v)
	}
	if _, ok := cpc.mutation.ID(); !ok {
		v := coinprogram.DefaultID()
		cpc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cpc *CoinProgramCreate) check() error {
	if _, ok := cpc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "CoinProgram.created_at"`)}
	}
	if _, ok := cpc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "CoinProgram.name"`)}
	}
	if v, ok := cpc.mutation.Name(); ok {
		if err := coinprogram.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "CoinProgram.name": %w`, err)}
		}
	}
	if _, ok := cpc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "CoinProgram.description"`)}
	}
	if _, ok := cpc.mutation.DayLimit(); !ok {
		return &ValidationError{Name: "day_limit", err: errors.New(`ent: missing required field "CoinProgram.day_limit"`)}
	}
	if v, ok := cpc.mutation.DayLimit(); ok {
		if err := coinprogram.DayLimitValidator(v); err != nil {
			return &ValidationError{Name: "day_limit", err: fmt.Errorf(`ent: validator failed for field "CoinProgram.day_limit": %w`, err)}
		}
	}
	if _, ok := cpc.mutation.CardColor(); !ok {
		return &ValidationError{Name: "card_color", err: errors.New(`ent: missing required field "CoinProgram.card_color"`)}
	}
	if v, ok := cpc.mutation.CardColor(); ok {
		if err := coinprogram.CardColorValidator(v); err != nil {
			return &ValidationError{Name: "card_color", err: fmt.Errorf(`ent: validator failed for field "CoinProgram.card_color": %w`, err)}
		}
	}
	if len(cpc.mutation.BusinessIDs()) == 0 {
		return &ValidationError{Name: "business", err: errors.New(`ent: missing required edge "CoinProgram.business"`)}
	}
	return nil
}

func (cpc *CoinProgramCreate) sqlSave(ctx context.Context) (*CoinProgram, error) {
	if err := cpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	cpc.mutation.id = &_node.ID
	cpc.mutation.done = true
	return _node, nil
}

func (cpc *CoinProgramCreate) createSpec() (*CoinProgram, *sqlgraph.CreateSpec) {
	var (
		_node = &CoinProgram{config: cpc.config}
		_spec = sqlgraph.NewCreateSpec(coinprogram.Table, sqlgraph.NewFieldSpec(coinprogram.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = cpc.conflict
	if id, ok := cpc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := cpc.mutation.CreatedAt(); ok {
		_spec.SetField(coinprogram.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cpc.mutation.Name(); ok {
		_spec.SetField(coinprogram.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cpc.mutation.Description(); ok {
		_spec.SetField(coinprogram.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := cpc.mutation.DayLimit(); ok {
		_spec.SetField(coinprogram.FieldDayLimit, field.TypeUint, value)
		_node.DayLimit = value
	}
	if value, ok := cpc.mutation.CardColor(); ok {
		_spec.SetField(coinprogram.FieldCardColor, field.TypeString, value)
		_node.CardColor = value
	}
	if nodes := cpc.mutation.BusinessIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   coinprogram.BusinessTable,
			Columns: []string{coinprogram.BusinessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.business_coin_program = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cpc.mutation.RewardsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   coinprogram.RewardsTable,
			Columns: []string{coinprogram.RewardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reward.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cpc.mutation.ParticipantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   coinprogram.ParticipantsTable,
			Columns: []string{coinprogram.ParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coinprogramparticipant.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CoinProgram.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CoinProgramUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (cpc *CoinProgramCreate) OnConflict(opts ...sql.ConflictOption) *CoinProgramUpsertOne {
	cpc.conflict = opts
	return &CoinProgramUpsertOne{
		create: cpc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CoinProgram.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cpc *CoinProgramCreate) OnConflictColumns(columns ...string) *CoinProgramUpsertOne {
	cpc.conflict = append(cpc.conflict, sql.ConflictColumns(columns...))
	return &CoinProgramUpsertOne{
		create: cpc,
	}
}

type (
	// CoinProgramUpsertOne is the builder for "upsert"-ing
	//  one CoinProgram node.
	CoinProgramUpsertOne struct {
		create *CoinProgramCreate
	}

	// CoinProgramUpsert is the "OnConflict" setter.
	CoinProgramUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *CoinProgramUpsert) SetName(v string) *CoinProgramUpsert {
	u.Set(coinprogram.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CoinProgramUpsert) UpdateName() *CoinProgramUpsert {
	u.SetExcluded(coinprogram.FieldName)
	return u
}

// SetDescription sets the "description" field.
func (u *CoinProgramUpsert) SetDescription(v string) *CoinProgramUpsert {
	u.Set(coinprogram.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *CoinProgramUpsert) UpdateDescription() *CoinProgramUpsert {
	u.SetExcluded(coinprogram.FieldDescription)
	return u
}

// SetDayLimit sets the "day_limit" field.
func (u *CoinProgramUpsert) SetDayLimit(v uint) *CoinProgramUpsert {
	u.Set(coinprogram.FieldDayLimit, v)
	return u
}

// UpdateDayLimit sets the "day_limit" field to the value that was provided on create.
func (u *CoinProgramUpsert) UpdateDayLimit() *CoinProgramUpsert {
	u.SetExcluded(coinprogram.FieldDayLimit)
	return u
}

// AddDayLimit adds v to the "day_limit" field.
func (u *CoinProgramUpsert) AddDayLimit(v uint) *CoinProgramUpsert {
	u.Add(coinprogram.FieldDayLimit, v)
	return u
}

// SetCardColor sets the "card_color" field.
func (u *CoinProgramUpsert) SetCardColor(v string) *CoinProgramUpsert {
	u.Set(coinprogram.FieldCardColor, v)
	return u
}

// UpdateCardColor sets the "card_color" field to the value that was provided on create.
func (u *CoinProgramUpsert) UpdateCardColor() *CoinProgramUpsert {
	u.SetExcluded(coinprogram.FieldCardColor)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.CoinProgram.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(coinprogram.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CoinProgramUpsertOne) UpdateNewValues() *CoinProgramUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(coinprogram.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(coinprogram.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CoinProgram.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CoinProgramUpsertOne) Ignore() *CoinProgramUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CoinProgramUpsertOne) DoNothing() *CoinProgramUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CoinProgramCreate.OnConflict
// documentation for more info.
func (u *CoinProgramUpsertOne) Update(set func(*CoinProgramUpsert)) *CoinProgramUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CoinProgramUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *CoinProgramUpsertOne) SetName(v string) *CoinProgramUpsertOne {
	return u.Update(func(s *CoinProgramUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CoinProgramUpsertOne) UpdateName() *CoinProgramUpsertOne {
	return u.Update(func(s *CoinProgramUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *CoinProgramUpsertOne) SetDescription(v string) *CoinProgramUpsertOne {
	return u.Update(func(s *CoinProgramUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *CoinProgramUpsertOne) UpdateDescription() *CoinProgramUpsertOne {
	return u.Update(func(s *CoinProgramUpsert) {
		s.UpdateDescription()
	})
}

// SetDayLimit sets the "day_limit" field.
func (u *CoinProgramUpsertOne) SetDayLimit(v uint) *CoinProgramUpsertOne {
	return u.Update(func(s *CoinProgramUpsert) {
		s.SetDayLimit(v)
	})
}

// AddDayLimit adds v to the "day_limit" field.
func (u *CoinProgramUpsertOne) AddDayLimit(v uint) *CoinProgramUpsertOne {
	return u.Update(func(s *CoinProgramUpsert) {
		s.AddDayLimit(v)
	})
}

// UpdateDayLimit sets the "day_limit" field to the value that was provided on create.
func (u *CoinProgramUpsertOne) UpdateDayLimit() *CoinProgramUpsertOne {
	return u.Update(func(s *CoinProgramUpsert) {
		s.UpdateDayLimit()
	})
}

// SetCardColor sets the "card_color" field.
func (u *CoinProgramUpsertOne) SetCardColor(v string) *CoinProgramUpsertOne {
	return u.Update(func(s *CoinProgramUpsert) {
		s.SetCardColor(v)
	})
}

// UpdateCardColor sets the "card_color" field to the value that was provided on create.
func (u *CoinProgramUpsertOne) UpdateCardColor() *CoinProgramUpsertOne {
	return u.Update(func(s *CoinProgramUpsert) {
		s.UpdateCardColor()
	})
}

// Exec executes the query.
func (u *CoinProgramUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CoinProgramCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CoinProgramUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CoinProgramUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: CoinProgramUpsertOne.ID is not supported by MySQL driver. Use CoinProgramUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CoinProgramUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CoinProgramCreateBulk is the builder for creating many CoinProgram entities in bulk.
type CoinProgramCreateBulk struct {
	config
	err      error
	builders []*CoinProgramCreate
	conflict []sql.ConflictOption
}

// Save creates the CoinProgram entities in the database.
func (cpcb *CoinProgramCreateBulk) Save(ctx context.Context) ([]*CoinProgram, error) {
	if cpcb.err != nil {
		return nil, cpcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cpcb.builders))
	nodes := make([]*CoinProgram, len(cpcb.builders))
	mutators := make([]Mutator, len(cpcb.builders))
	for i := range cpcb.builders {
		func(i int, root context.Context) {
			builder := cpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CoinProgramMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = cpcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cpcb *CoinProgramCreateBulk) SaveX(ctx context.Context) []*CoinProgram {
	v, err := cpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cpcb *CoinProgramCreateBulk) Exec(ctx context.Context) error {
	_, err := cpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpcb *CoinProgramCreateBulk) ExecX(ctx context.Context) {
	if err := cpcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CoinProgram.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CoinProgramUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (cpcb *CoinProgramCreateBulk) OnConflict(opts ...sql.ConflictOption) *CoinProgramUpsertBulk {
	cpcb.conflict = opts
	return &CoinProgramUpsertBulk{
		create: cpcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CoinProgram.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cpcb *CoinProgramCreateBulk) OnConflictColumns(columns ...string) *CoinProgramUpsertBulk {
	cpcb.conflict = append(cpcb.conflict, sql.ConflictColumns(columns...))
	return &CoinProgramUpsertBulk{
		create: cpcb,
	}
}

// CoinProgramUpsertBulk is the builder for "upsert"-ing
// a bulk of CoinProgram nodes.
type CoinProgramUpsertBulk struct {
	create *CoinProgramCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CoinProgram.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(coinprogram.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CoinProgramUpsertBulk) UpdateNewValues() *CoinProgramUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(coinprogram.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(coinprogram.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CoinProgram.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CoinProgramUpsertBulk) Ignore() *CoinProgramUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CoinProgramUpsertBulk) DoNothing() *CoinProgramUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CoinProgramCreateBulk.OnConflict
// documentation for more info.
func (u *CoinProgramUpsertBulk) Update(set func(*CoinProgramUpsert)) *CoinProgramUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CoinProgramUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *CoinProgramUpsertBulk) SetName(v string) *CoinProgramUpsertBulk {
	return u.Update(func(s *CoinProgramUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CoinProgramUpsertBulk) UpdateName() *CoinProgramUpsertBulk {
	return u.Update(func(s *CoinProgramUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *CoinProgramUpsertBulk) SetDescription(v string) *CoinProgramUpsertBulk {
	return u.Update(func(s *CoinProgramUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *CoinProgramUpsertBulk) UpdateDescription() *CoinProgramUpsertBulk {
	return u.Update(func(s *CoinProgramUpsert) {
		s.UpdateDescription()
	})
}

// SetDayLimit sets the "day_limit" field.
func (u *CoinProgramUpsertBulk) SetDayLimit(v uint) *CoinProgramUpsertBulk {
	return u.Update(func(s *CoinProgramUpsert) {
		s.SetDayLimit(v)
	})
}

// AddDayLimit adds v to the "day_limit" field.
func (u *CoinProgramUpsertBulk) AddDayLimit(v uint) *CoinProgramUpsertBulk {
	return u.Update(func(s *CoinProgramUpsert) {
		s.AddDayLimit(v)
	})
}

// UpdateDayLimit sets the "day_limit" field to the value that was provided on create.
func (u *CoinProgramUpsertBulk) UpdateDayLimit() *CoinProgramUpsertBulk {
	return u.Update(func(s *CoinProgramUpsert) {
		s.UpdateDayLimit()
	})
}

// SetCardColor sets the "card_color" field.
func (u *CoinProgramUpsertBulk) SetCardColor(v string) *CoinProgramUpsertBulk {
	return u.Update(func(s *CoinProgramUpsert) {
		s.SetCardColor(v)
	})
}

// UpdateCardColor sets the "card_color" field to the value that was provided on create.
func (u *CoinProgramUpsertBulk) UpdateCardColor() *CoinProgramUpsertBulk {
	return u.Update(func(s *CoinProgramUpsert) {
		s.UpdateCardColor()
	})
}

// Exec executes the query.
func (u *CoinProgramUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CoinProgramCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CoinProgramCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CoinProgramUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

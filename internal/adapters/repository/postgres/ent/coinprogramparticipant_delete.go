// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"loyalit/internal/adapters/repository/postgres/ent/coinprogramparticipant"
	"loyalit/internal/adapters/repository/postgres/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CoinProgramParticipantDelete is the builder for deleting a CoinProgramParticipant entity.
type CoinProgramParticipantDelete struct {
	config
	hooks    []Hook
	mutation *CoinProgramParticipantMutation
}

// Where appends a list predicates to the CoinProgramParticipantDelete builder.
func (cppd *CoinProgramParticipantDelete) Where(ps ...predicate.CoinProgramParticipant) *CoinProgramParticipantDelete {
	cppd.mutation.Where(ps...)
	return cppd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (cppd *CoinProgramParticipantDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, cppd.sqlExec, cppd.mutation, cppd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (cppd *CoinProgramParticipantDelete) ExecX(ctx context.Context) int {
	n, err := cppd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (cppd *CoinProgramParticipantDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(coinprogramparticipant.Table, sqlgraph.NewFieldSpec(coinprogramparticipant.FieldID, field.TypeUUID))
	if ps := cppd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, cppd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	cppd.mutation.done = true
	return affected, err
}

// CoinProgramParticipantDeleteOne is the builder for deleting a single CoinProgramParticipant entity.
type CoinProgramParticipantDeleteOne struct {
	cppd *CoinProgramParticipantDelete
}

// Where appends a list predicates to the CoinProgramParticipantDelete builder.
func (cppdo *CoinProgramParticipantDeleteOne) Where(ps ...predicate.CoinProgramParticipant) *CoinProgramParticipantDeleteOne {
	cppdo.cppd.mutation.Where(ps...)
	return cppdo
}

// Exec executes the deletion query.
func (cppdo *CoinProgramParticipantDeleteOne) Exec(ctx context.Context) error {
	n, err := cppdo.cppd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{coinprogramparticipant.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (cppdo *CoinProgramParticipantDeleteOne) ExecX(ctx context.Context) {
	if err := cppdo.Exec(ctx); err != nil {
		panic(err)
	}
}

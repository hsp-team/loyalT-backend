// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"loyalit/internal/adapters/repository/postgres/ent/business"
	"loyalit/internal/adapters/repository/postgres/ent/coinprogram"
	"loyalit/internal/adapters/repository/postgres/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// BusinessUpdate is the builder for updating Business entities.
type BusinessUpdate struct {
	config
	hooks    []Hook
	mutation *BusinessMutation
}

// Where appends a list predicates to the BusinessUpdate builder.
func (bu *BusinessUpdate) Where(ps ...predicate.Business) *BusinessUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// SetName sets the "name" field.
func (bu *BusinessUpdate) SetName(s string) *BusinessUpdate {
	bu.mutation.SetName(s)
	return bu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (bu *BusinessUpdate) SetNillableName(s *string) *BusinessUpdate {
	if s != nil {
		bu.SetName(*s)
	}
	return bu
}

// SetEmail sets the "email" field.
func (bu *BusinessUpdate) SetEmail(s string) *BusinessUpdate {
	bu.mutation.SetEmail(s)
	return bu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (bu *BusinessUpdate) SetNillableEmail(s *string) *BusinessUpdate {
	if s != nil {
		bu.SetEmail(*s)
	}
	return bu
}

// SetPassword sets the "password" field.
func (bu *BusinessUpdate) SetPassword(s string) *BusinessUpdate {
	bu.mutation.SetPassword(s)
	return bu
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (bu *BusinessUpdate) SetNillablePassword(s *string) *BusinessUpdate {
	if s != nil {
		bu.SetPassword(*s)
	}
	return bu
}

// SetDescription sets the "description" field.
func (bu *BusinessUpdate) SetDescription(s string) *BusinessUpdate {
	bu.mutation.SetDescription(s)
	return bu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (bu *BusinessUpdate) SetNillableDescription(s *string) *BusinessUpdate {
	if s != nil {
		bu.SetDescription(*s)
	}
	return bu
}

// SetCoinProgramID sets the "coin_program" edge to the CoinProgram entity by ID.
func (bu *BusinessUpdate) SetCoinProgramID(id uuid.UUID) *BusinessUpdate {
	bu.mutation.SetCoinProgramID(id)
	return bu
}

// SetNillableCoinProgramID sets the "coin_program" edge to the CoinProgram entity by ID if the given value is not nil.
func (bu *BusinessUpdate) SetNillableCoinProgramID(id *uuid.UUID) *BusinessUpdate {
	if id != nil {
		bu = bu.SetCoinProgramID(*id)
	}
	return bu
}

// SetCoinProgram sets the "coin_program" edge to the CoinProgram entity.
func (bu *BusinessUpdate) SetCoinProgram(c *CoinProgram) *BusinessUpdate {
	return bu.SetCoinProgramID(c.ID)
}

// Mutation returns the BusinessMutation object of the builder.
func (bu *BusinessUpdate) Mutation() *BusinessMutation {
	return bu.mutation
}

// ClearCoinProgram clears the "coin_program" edge to the CoinProgram entity.
func (bu *BusinessUpdate) ClearCoinProgram() *BusinessUpdate {
	bu.mutation.ClearCoinProgram()
	return bu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BusinessUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, bu.sqlSave, bu.mutation, bu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BusinessUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BusinessUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BusinessUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bu *BusinessUpdate) check() error {
	if v, ok := bu.mutation.Name(); ok {
		if err := business.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Business.name": %w`, err)}
		}
	}
	if v, ok := bu.mutation.Email(); ok {
		if err := business.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "Business.email": %w`, err)}
		}
	}
	if v, ok := bu.mutation.Password(); ok {
		if err := business.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "Business.password": %w`, err)}
		}
	}
	if v, ok := bu.mutation.Description(); ok {
		if err := business.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Business.description": %w`, err)}
		}
	}
	return nil
}

func (bu *BusinessUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(business.Table, business.Columns, sqlgraph.NewFieldSpec(business.FieldID, field.TypeUUID))
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.Name(); ok {
		_spec.SetField(business.FieldName, field.TypeString, value)
	}
	if value, ok := bu.mutation.Email(); ok {
		_spec.SetField(business.FieldEmail, field.TypeString, value)
	}
	if value, ok := bu.mutation.Password(); ok {
		_spec.SetField(business.FieldPassword, field.TypeString, value)
	}
	if value, ok := bu.mutation.Description(); ok {
		_spec.SetField(business.FieldDescription, field.TypeString, value)
	}
	if bu.mutation.CoinProgramCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   business.CoinProgramTable,
			Columns: []string{business.CoinProgramColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coinprogram.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.CoinProgramIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   business.CoinProgramTable,
			Columns: []string{business.CoinProgramColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coinprogram.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{business.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bu.mutation.done = true
	return n, nil
}

// BusinessUpdateOne is the builder for updating a single Business entity.
type BusinessUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BusinessMutation
}

// SetName sets the "name" field.
func (buo *BusinessUpdateOne) SetName(s string) *BusinessUpdateOne {
	buo.mutation.SetName(s)
	return buo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (buo *BusinessUpdateOne) SetNillableName(s *string) *BusinessUpdateOne {
	if s != nil {
		buo.SetName(*s)
	}
	return buo
}

// SetEmail sets the "email" field.
func (buo *BusinessUpdateOne) SetEmail(s string) *BusinessUpdateOne {
	buo.mutation.SetEmail(s)
	return buo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (buo *BusinessUpdateOne) SetNillableEmail(s *string) *BusinessUpdateOne {
	if s != nil {
		buo.SetEmail(*s)
	}
	return buo
}

// SetPassword sets the "password" field.
func (buo *BusinessUpdateOne) SetPassword(s string) *BusinessUpdateOne {
	buo.mutation.SetPassword(s)
	return buo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (buo *BusinessUpdateOne) SetNillablePassword(s *string) *BusinessUpdateOne {
	if s != nil {
		buo.SetPassword(*s)
	}
	return buo
}

// SetDescription sets the "description" field.
func (buo *BusinessUpdateOne) SetDescription(s string) *BusinessUpdateOne {
	buo.mutation.SetDescription(s)
	return buo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (buo *BusinessUpdateOne) SetNillableDescription(s *string) *BusinessUpdateOne {
	if s != nil {
		buo.SetDescription(*s)
	}
	return buo
}

// SetCoinProgramID sets the "coin_program" edge to the CoinProgram entity by ID.
func (buo *BusinessUpdateOne) SetCoinProgramID(id uuid.UUID) *BusinessUpdateOne {
	buo.mutation.SetCoinProgramID(id)
	return buo
}

// SetNillableCoinProgramID sets the "coin_program" edge to the CoinProgram entity by ID if the given value is not nil.
func (buo *BusinessUpdateOne) SetNillableCoinProgramID(id *uuid.UUID) *BusinessUpdateOne {
	if id != nil {
		buo = buo.SetCoinProgramID(*id)
	}
	return buo
}

// SetCoinProgram sets the "coin_program" edge to the CoinProgram entity.
func (buo *BusinessUpdateOne) SetCoinProgram(c *CoinProgram) *BusinessUpdateOne {
	return buo.SetCoinProgramID(c.ID)
}

// Mutation returns the BusinessMutation object of the builder.
func (buo *BusinessUpdateOne) Mutation() *BusinessMutation {
	return buo.mutation
}

// ClearCoinProgram clears the "coin_program" edge to the CoinProgram entity.
func (buo *BusinessUpdateOne) ClearCoinProgram() *BusinessUpdateOne {
	buo.mutation.ClearCoinProgram()
	return buo
}

// Where appends a list predicates to the BusinessUpdate builder.
func (buo *BusinessUpdateOne) Where(ps ...predicate.Business) *BusinessUpdateOne {
	buo.mutation.Where(ps...)
	return buo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BusinessUpdateOne) Select(field string, fields ...string) *BusinessUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Business entity.
func (buo *BusinessUpdateOne) Save(ctx context.Context) (*Business, error) {
	return withHooks(ctx, buo.sqlSave, buo.mutation, buo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BusinessUpdateOne) SaveX(ctx context.Context) *Business {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BusinessUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BusinessUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (buo *BusinessUpdateOne) check() error {
	if v, ok := buo.mutation.Name(); ok {
		if err := business.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Business.name": %w`, err)}
		}
	}
	if v, ok := buo.mutation.Email(); ok {
		if err := business.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "Business.email": %w`, err)}
		}
	}
	if v, ok := buo.mutation.Password(); ok {
		if err := business.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "Business.password": %w`, err)}
		}
	}
	if v, ok := buo.mutation.Description(); ok {
		if err := business.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Business.description": %w`, err)}
		}
	}
	return nil
}

func (buo *BusinessUpdateOne) sqlSave(ctx context.Context) (_node *Business, err error) {
	if err := buo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(business.Table, business.Columns, sqlgraph.NewFieldSpec(business.FieldID, field.TypeUUID))
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Business.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, business.FieldID)
		for _, f := range fields {
			if !business.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != business.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.Name(); ok {
		_spec.SetField(business.FieldName, field.TypeString, value)
	}
	if value, ok := buo.mutation.Email(); ok {
		_spec.SetField(business.FieldEmail, field.TypeString, value)
	}
	if value, ok := buo.mutation.Password(); ok {
		_spec.SetField(business.FieldPassword, field.TypeString, value)
	}
	if value, ok := buo.mutation.Description(); ok {
		_spec.SetField(business.FieldDescription, field.TypeString, value)
	}
	if buo.mutation.CoinProgramCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   business.CoinProgramTable,
			Columns: []string{business.CoinProgramColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coinprogram.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.CoinProgramIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   business.CoinProgramTable,
			Columns: []string{business.CoinProgramColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coinprogram.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Business{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{business.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	buo.mutation.done = true
	return _node, nil
}

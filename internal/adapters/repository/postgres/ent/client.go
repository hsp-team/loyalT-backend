// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"loyalit/internal/adapters/repository/postgres/ent/migrate"

	"loyalit/internal/adapters/repository/postgres/ent/business"
	"loyalit/internal/adapters/repository/postgres/ent/coinprogram"
	"loyalit/internal/adapters/repository/postgres/ent/coinprogramparticipant"
	"loyalit/internal/adapters/repository/postgres/ent/coupon"
	"loyalit/internal/adapters/repository/postgres/ent/reward"
	"loyalit/internal/adapters/repository/postgres/ent/user"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Business is the client for interacting with the Business builders.
	Business *BusinessClient
	// CoinProgram is the client for interacting with the CoinProgram builders.
	CoinProgram *CoinProgramClient
	// CoinProgramParticipant is the client for interacting with the CoinProgramParticipant builders.
	CoinProgramParticipant *CoinProgramParticipantClient
	// Coupon is the client for interacting with the Coupon builders.
	Coupon *CouponClient
	// Reward is the client for interacting with the Reward builders.
	Reward *RewardClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Business = NewBusinessClient(c.config)
	c.CoinProgram = NewCoinProgramClient(c.config)
	c.CoinProgramParticipant = NewCoinProgramParticipantClient(c.config)
	c.Coupon = NewCouponClient(c.config)
	c.Reward = NewRewardClient(c.config)
	c.User = NewUserClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                    ctx,
		config:                 cfg,
		Business:               NewBusinessClient(cfg),
		CoinProgram:            NewCoinProgramClient(cfg),
		CoinProgramParticipant: NewCoinProgramParticipantClient(cfg),
		Coupon:                 NewCouponClient(cfg),
		Reward:                 NewRewardClient(cfg),
		User:                   NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                    ctx,
		config:                 cfg,
		Business:               NewBusinessClient(cfg),
		CoinProgram:            NewCoinProgramClient(cfg),
		CoinProgramParticipant: NewCoinProgramParticipantClient(cfg),
		Coupon:                 NewCouponClient(cfg),
		Reward:                 NewRewardClient(cfg),
		User:                   NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Business.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Business, c.CoinProgram, c.CoinProgramParticipant, c.Coupon, c.Reward, c.User,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Business, c.CoinProgram, c.CoinProgramParticipant, c.Coupon, c.Reward, c.User,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *BusinessMutation:
		return c.Business.mutate(ctx, m)
	case *CoinProgramMutation:
		return c.CoinProgram.mutate(ctx, m)
	case *CoinProgramParticipantMutation:
		return c.CoinProgramParticipant.mutate(ctx, m)
	case *CouponMutation:
		return c.Coupon.mutate(ctx, m)
	case *RewardMutation:
		return c.Reward.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// BusinessClient is a client for the Business schema.
type BusinessClient struct {
	config
}

// NewBusinessClient returns a client for the Business from the given config.
func NewBusinessClient(c config) *BusinessClient {
	return &BusinessClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `business.Hooks(f(g(h())))`.
func (c *BusinessClient) Use(hooks ...Hook) {
	c.hooks.Business = append(c.hooks.Business, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `business.Intercept(f(g(h())))`.
func (c *BusinessClient) Intercept(interceptors ...Interceptor) {
	c.inters.Business = append(c.inters.Business, interceptors...)
}

// Create returns a builder for creating a Business entity.
func (c *BusinessClient) Create() *BusinessCreate {
	mutation := newBusinessMutation(c.config, OpCreate)
	return &BusinessCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Business entities.
func (c *BusinessClient) CreateBulk(builders ...*BusinessCreate) *BusinessCreateBulk {
	return &BusinessCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BusinessClient) MapCreateBulk(slice any, setFunc func(*BusinessCreate, int)) *BusinessCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BusinessCreateBulk{err: fmt.Errorf("calling to BusinessClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BusinessCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BusinessCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Business.
func (c *BusinessClient) Update() *BusinessUpdate {
	mutation := newBusinessMutation(c.config, OpUpdate)
	return &BusinessUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BusinessClient) UpdateOne(b *Business) *BusinessUpdateOne {
	mutation := newBusinessMutation(c.config, OpUpdateOne, withBusiness(b))
	return &BusinessUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BusinessClient) UpdateOneID(id uuid.UUID) *BusinessUpdateOne {
	mutation := newBusinessMutation(c.config, OpUpdateOne, withBusinessID(id))
	return &BusinessUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Business.
func (c *BusinessClient) Delete() *BusinessDelete {
	mutation := newBusinessMutation(c.config, OpDelete)
	return &BusinessDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BusinessClient) DeleteOne(b *Business) *BusinessDeleteOne {
	return c.DeleteOneID(b.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BusinessClient) DeleteOneID(id uuid.UUID) *BusinessDeleteOne {
	builder := c.Delete().Where(business.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BusinessDeleteOne{builder}
}

// Query returns a query builder for Business.
func (c *BusinessClient) Query() *BusinessQuery {
	return &BusinessQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBusiness},
		inters: c.Interceptors(),
	}
}

// Get returns a Business entity by its id.
func (c *BusinessClient) Get(ctx context.Context, id uuid.UUID) (*Business, error) {
	return c.Query().Where(business.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BusinessClient) GetX(ctx context.Context, id uuid.UUID) *Business {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCoinProgram queries the coin_program edge of a Business.
func (c *BusinessClient) QueryCoinProgram(b *Business) *CoinProgramQuery {
	query := (&CoinProgramClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(business.Table, business.FieldID, id),
			sqlgraph.To(coinprogram.Table, coinprogram.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, business.CoinProgramTable, business.CoinProgramColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BusinessClient) Hooks() []Hook {
	return c.hooks.Business
}

// Interceptors returns the client interceptors.
func (c *BusinessClient) Interceptors() []Interceptor {
	return c.inters.Business
}

func (c *BusinessClient) mutate(ctx context.Context, m *BusinessMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BusinessCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BusinessUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BusinessUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BusinessDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Business mutation op: %q", m.Op())
	}
}

// CoinProgramClient is a client for the CoinProgram schema.
type CoinProgramClient struct {
	config
}

// NewCoinProgramClient returns a client for the CoinProgram from the given config.
func NewCoinProgramClient(c config) *CoinProgramClient {
	return &CoinProgramClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `coinprogram.Hooks(f(g(h())))`.
func (c *CoinProgramClient) Use(hooks ...Hook) {
	c.hooks.CoinProgram = append(c.hooks.CoinProgram, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `coinprogram.Intercept(f(g(h())))`.
func (c *CoinProgramClient) Intercept(interceptors ...Interceptor) {
	c.inters.CoinProgram = append(c.inters.CoinProgram, interceptors...)
}

// Create returns a builder for creating a CoinProgram entity.
func (c *CoinProgramClient) Create() *CoinProgramCreate {
	mutation := newCoinProgramMutation(c.config, OpCreate)
	return &CoinProgramCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CoinProgram entities.
func (c *CoinProgramClient) CreateBulk(builders ...*CoinProgramCreate) *CoinProgramCreateBulk {
	return &CoinProgramCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CoinProgramClient) MapCreateBulk(slice any, setFunc func(*CoinProgramCreate, int)) *CoinProgramCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CoinProgramCreateBulk{err: fmt.Errorf("calling to CoinProgramClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CoinProgramCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CoinProgramCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CoinProgram.
func (c *CoinProgramClient) Update() *CoinProgramUpdate {
	mutation := newCoinProgramMutation(c.config, OpUpdate)
	return &CoinProgramUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CoinProgramClient) UpdateOne(cp *CoinProgram) *CoinProgramUpdateOne {
	mutation := newCoinProgramMutation(c.config, OpUpdateOne, withCoinProgram(cp))
	return &CoinProgramUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CoinProgramClient) UpdateOneID(id uuid.UUID) *CoinProgramUpdateOne {
	mutation := newCoinProgramMutation(c.config, OpUpdateOne, withCoinProgramID(id))
	return &CoinProgramUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CoinProgram.
func (c *CoinProgramClient) Delete() *CoinProgramDelete {
	mutation := newCoinProgramMutation(c.config, OpDelete)
	return &CoinProgramDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CoinProgramClient) DeleteOne(cp *CoinProgram) *CoinProgramDeleteOne {
	return c.DeleteOneID(cp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CoinProgramClient) DeleteOneID(id uuid.UUID) *CoinProgramDeleteOne {
	builder := c.Delete().Where(coinprogram.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CoinProgramDeleteOne{builder}
}

// Query returns a query builder for CoinProgram.
func (c *CoinProgramClient) Query() *CoinProgramQuery {
	return &CoinProgramQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCoinProgram},
		inters: c.Interceptors(),
	}
}

// Get returns a CoinProgram entity by its id.
func (c *CoinProgramClient) Get(ctx context.Context, id uuid.UUID) (*CoinProgram, error) {
	return c.Query().Where(coinprogram.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CoinProgramClient) GetX(ctx context.Context, id uuid.UUID) *CoinProgram {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBusiness queries the business edge of a CoinProgram.
func (c *CoinProgramClient) QueryBusiness(cp *CoinProgram) *BusinessQuery {
	query := (&BusinessClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(coinprogram.Table, coinprogram.FieldID, id),
			sqlgraph.To(business.Table, business.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, coinprogram.BusinessTable, coinprogram.BusinessColumn),
		)
		fromV = sqlgraph.Neighbors(cp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRewards queries the rewards edge of a CoinProgram.
func (c *CoinProgramClient) QueryRewards(cp *CoinProgram) *RewardQuery {
	query := (&RewardClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(coinprogram.Table, coinprogram.FieldID, id),
			sqlgraph.To(reward.Table, reward.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, coinprogram.RewardsTable, coinprogram.RewardsColumn),
		)
		fromV = sqlgraph.Neighbors(cp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryParticipants queries the participants edge of a CoinProgram.
func (c *CoinProgramClient) QueryParticipants(cp *CoinProgram) *CoinProgramParticipantQuery {
	query := (&CoinProgramParticipantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(coinprogram.Table, coinprogram.FieldID, id),
			sqlgraph.To(coinprogramparticipant.Table, coinprogramparticipant.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, coinprogram.ParticipantsTable, coinprogram.ParticipantsColumn),
		)
		fromV = sqlgraph.Neighbors(cp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CoinProgramClient) Hooks() []Hook {
	return c.hooks.CoinProgram
}

// Interceptors returns the client interceptors.
func (c *CoinProgramClient) Interceptors() []Interceptor {
	return c.inters.CoinProgram
}

func (c *CoinProgramClient) mutate(ctx context.Context, m *CoinProgramMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CoinProgramCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CoinProgramUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CoinProgramUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CoinProgramDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CoinProgram mutation op: %q", m.Op())
	}
}

// CoinProgramParticipantClient is a client for the CoinProgramParticipant schema.
type CoinProgramParticipantClient struct {
	config
}

// NewCoinProgramParticipantClient returns a client for the CoinProgramParticipant from the given config.
func NewCoinProgramParticipantClient(c config) *CoinProgramParticipantClient {
	return &CoinProgramParticipantClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `coinprogramparticipant.Hooks(f(g(h())))`.
func (c *CoinProgramParticipantClient) Use(hooks ...Hook) {
	c.hooks.CoinProgramParticipant = append(c.hooks.CoinProgramParticipant, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `coinprogramparticipant.Intercept(f(g(h())))`.
func (c *CoinProgramParticipantClient) Intercept(interceptors ...Interceptor) {
	c.inters.CoinProgramParticipant = append(c.inters.CoinProgramParticipant, interceptors...)
}

// Create returns a builder for creating a CoinProgramParticipant entity.
func (c *CoinProgramParticipantClient) Create() *CoinProgramParticipantCreate {
	mutation := newCoinProgramParticipantMutation(c.config, OpCreate)
	return &CoinProgramParticipantCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CoinProgramParticipant entities.
func (c *CoinProgramParticipantClient) CreateBulk(builders ...*CoinProgramParticipantCreate) *CoinProgramParticipantCreateBulk {
	return &CoinProgramParticipantCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CoinProgramParticipantClient) MapCreateBulk(slice any, setFunc func(*CoinProgramParticipantCreate, int)) *CoinProgramParticipantCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CoinProgramParticipantCreateBulk{err: fmt.Errorf("calling to CoinProgramParticipantClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CoinProgramParticipantCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CoinProgramParticipantCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CoinProgramParticipant.
func (c *CoinProgramParticipantClient) Update() *CoinProgramParticipantUpdate {
	mutation := newCoinProgramParticipantMutation(c.config, OpUpdate)
	return &CoinProgramParticipantUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CoinProgramParticipantClient) UpdateOne(cpp *CoinProgramParticipant) *CoinProgramParticipantUpdateOne {
	mutation := newCoinProgramParticipantMutation(c.config, OpUpdateOne, withCoinProgramParticipant(cpp))
	return &CoinProgramParticipantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CoinProgramParticipantClient) UpdateOneID(id uuid.UUID) *CoinProgramParticipantUpdateOne {
	mutation := newCoinProgramParticipantMutation(c.config, OpUpdateOne, withCoinProgramParticipantID(id))
	return &CoinProgramParticipantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CoinProgramParticipant.
func (c *CoinProgramParticipantClient) Delete() *CoinProgramParticipantDelete {
	mutation := newCoinProgramParticipantMutation(c.config, OpDelete)
	return &CoinProgramParticipantDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CoinProgramParticipantClient) DeleteOne(cpp *CoinProgramParticipant) *CoinProgramParticipantDeleteOne {
	return c.DeleteOneID(cpp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CoinProgramParticipantClient) DeleteOneID(id uuid.UUID) *CoinProgramParticipantDeleteOne {
	builder := c.Delete().Where(coinprogramparticipant.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CoinProgramParticipantDeleteOne{builder}
}

// Query returns a query builder for CoinProgramParticipant.
func (c *CoinProgramParticipantClient) Query() *CoinProgramParticipantQuery {
	return &CoinProgramParticipantQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCoinProgramParticipant},
		inters: c.Interceptors(),
	}
}

// Get returns a CoinProgramParticipant entity by its id.
func (c *CoinProgramParticipantClient) Get(ctx context.Context, id uuid.UUID) (*CoinProgramParticipant, error) {
	return c.Query().Where(coinprogramparticipant.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CoinProgramParticipantClient) GetX(ctx context.Context, id uuid.UUID) *CoinProgramParticipant {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCoinProgram queries the coin_program edge of a CoinProgramParticipant.
func (c *CoinProgramParticipantClient) QueryCoinProgram(cpp *CoinProgramParticipant) *CoinProgramQuery {
	query := (&CoinProgramClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cpp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(coinprogramparticipant.Table, coinprogramparticipant.FieldID, id),
			sqlgraph.To(coinprogram.Table, coinprogram.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, coinprogramparticipant.CoinProgramTable, coinprogramparticipant.CoinProgramColumn),
		)
		fromV = sqlgraph.Neighbors(cpp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a CoinProgramParticipant.
func (c *CoinProgramParticipantClient) QueryUser(cpp *CoinProgramParticipant) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cpp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(coinprogramparticipant.Table, coinprogramparticipant.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, coinprogramparticipant.UserTable, coinprogramparticipant.UserColumn),
		)
		fromV = sqlgraph.Neighbors(cpp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CoinProgramParticipantClient) Hooks() []Hook {
	return c.hooks.CoinProgramParticipant
}

// Interceptors returns the client interceptors.
func (c *CoinProgramParticipantClient) Interceptors() []Interceptor {
	return c.inters.CoinProgramParticipant
}

func (c *CoinProgramParticipantClient) mutate(ctx context.Context, m *CoinProgramParticipantMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CoinProgramParticipantCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CoinProgramParticipantUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CoinProgramParticipantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CoinProgramParticipantDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CoinProgramParticipant mutation op: %q", m.Op())
	}
}

// CouponClient is a client for the Coupon schema.
type CouponClient struct {
	config
}

// NewCouponClient returns a client for the Coupon from the given config.
func NewCouponClient(c config) *CouponClient {
	return &CouponClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `coupon.Hooks(f(g(h())))`.
func (c *CouponClient) Use(hooks ...Hook) {
	c.hooks.Coupon = append(c.hooks.Coupon, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `coupon.Intercept(f(g(h())))`.
func (c *CouponClient) Intercept(interceptors ...Interceptor) {
	c.inters.Coupon = append(c.inters.Coupon, interceptors...)
}

// Create returns a builder for creating a Coupon entity.
func (c *CouponClient) Create() *CouponCreate {
	mutation := newCouponMutation(c.config, OpCreate)
	return &CouponCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Coupon entities.
func (c *CouponClient) CreateBulk(builders ...*CouponCreate) *CouponCreateBulk {
	return &CouponCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CouponClient) MapCreateBulk(slice any, setFunc func(*CouponCreate, int)) *CouponCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CouponCreateBulk{err: fmt.Errorf("calling to CouponClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CouponCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CouponCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Coupon.
func (c *CouponClient) Update() *CouponUpdate {
	mutation := newCouponMutation(c.config, OpUpdate)
	return &CouponUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CouponClient) UpdateOne(co *Coupon) *CouponUpdateOne {
	mutation := newCouponMutation(c.config, OpUpdateOne, withCoupon(co))
	return &CouponUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CouponClient) UpdateOneID(id uuid.UUID) *CouponUpdateOne {
	mutation := newCouponMutation(c.config, OpUpdateOne, withCouponID(id))
	return &CouponUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Coupon.
func (c *CouponClient) Delete() *CouponDelete {
	mutation := newCouponMutation(c.config, OpDelete)
	return &CouponDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CouponClient) DeleteOne(co *Coupon) *CouponDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CouponClient) DeleteOneID(id uuid.UUID) *CouponDeleteOne {
	builder := c.Delete().Where(coupon.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CouponDeleteOne{builder}
}

// Query returns a query builder for Coupon.
func (c *CouponClient) Query() *CouponQuery {
	return &CouponQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCoupon},
		inters: c.Interceptors(),
	}
}

// Get returns a Coupon entity by its id.
func (c *CouponClient) Get(ctx context.Context, id uuid.UUID) (*Coupon, error) {
	return c.Query().Where(coupon.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CouponClient) GetX(ctx context.Context, id uuid.UUID) *Coupon {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a Coupon.
func (c *CouponClient) QueryOwner(co *Coupon) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(coupon.Table, coupon.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, coupon.OwnerTable, coupon.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryReward queries the reward edge of a Coupon.
func (c *CouponClient) QueryReward(co *Coupon) *RewardQuery {
	query := (&RewardClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(coupon.Table, coupon.FieldID, id),
			sqlgraph.To(reward.Table, reward.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, coupon.RewardTable, coupon.RewardColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CouponClient) Hooks() []Hook {
	return c.hooks.Coupon
}

// Interceptors returns the client interceptors.
func (c *CouponClient) Interceptors() []Interceptor {
	return c.inters.Coupon
}

func (c *CouponClient) mutate(ctx context.Context, m *CouponMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CouponCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CouponUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CouponUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CouponDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Coupon mutation op: %q", m.Op())
	}
}

// RewardClient is a client for the Reward schema.
type RewardClient struct {
	config
}

// NewRewardClient returns a client for the Reward from the given config.
func NewRewardClient(c config) *RewardClient {
	return &RewardClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `reward.Hooks(f(g(h())))`.
func (c *RewardClient) Use(hooks ...Hook) {
	c.hooks.Reward = append(c.hooks.Reward, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `reward.Intercept(f(g(h())))`.
func (c *RewardClient) Intercept(interceptors ...Interceptor) {
	c.inters.Reward = append(c.inters.Reward, interceptors...)
}

// Create returns a builder for creating a Reward entity.
func (c *RewardClient) Create() *RewardCreate {
	mutation := newRewardMutation(c.config, OpCreate)
	return &RewardCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Reward entities.
func (c *RewardClient) CreateBulk(builders ...*RewardCreate) *RewardCreateBulk {
	return &RewardCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *RewardClient) MapCreateBulk(slice any, setFunc func(*RewardCreate, int)) *RewardCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &RewardCreateBulk{err: fmt.Errorf("calling to RewardClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*RewardCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &RewardCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Reward.
func (c *RewardClient) Update() *RewardUpdate {
	mutation := newRewardMutation(c.config, OpUpdate)
	return &RewardUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RewardClient) UpdateOne(r *Reward) *RewardUpdateOne {
	mutation := newRewardMutation(c.config, OpUpdateOne, withReward(r))
	return &RewardUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RewardClient) UpdateOneID(id uuid.UUID) *RewardUpdateOne {
	mutation := newRewardMutation(c.config, OpUpdateOne, withRewardID(id))
	return &RewardUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Reward.
func (c *RewardClient) Delete() *RewardDelete {
	mutation := newRewardMutation(c.config, OpDelete)
	return &RewardDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RewardClient) DeleteOne(r *Reward) *RewardDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RewardClient) DeleteOneID(id uuid.UUID) *RewardDeleteOne {
	builder := c.Delete().Where(reward.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RewardDeleteOne{builder}
}

// Query returns a query builder for Reward.
func (c *RewardClient) Query() *RewardQuery {
	return &RewardQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeReward},
		inters: c.Interceptors(),
	}
}

// Get returns a Reward entity by its id.
func (c *RewardClient) Get(ctx context.Context, id uuid.UUID) (*Reward, error) {
	return c.Query().Where(reward.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RewardClient) GetX(ctx context.Context, id uuid.UUID) *Reward {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCoinProgram queries the coin_program edge of a Reward.
func (c *RewardClient) QueryCoinProgram(r *Reward) *CoinProgramQuery {
	query := (&CoinProgramClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(reward.Table, reward.FieldID, id),
			sqlgraph.To(coinprogram.Table, coinprogram.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, reward.CoinProgramTable, reward.CoinProgramColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRewards queries the rewards edge of a Reward.
func (c *RewardClient) QueryRewards(r *Reward) *CouponQuery {
	query := (&CouponClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(reward.Table, reward.FieldID, id),
			sqlgraph.To(coupon.Table, coupon.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, reward.RewardsTable, reward.RewardsColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RewardClient) Hooks() []Hook {
	return c.hooks.Reward
}

// Interceptors returns the client interceptors.
func (c *RewardClient) Interceptors() []Interceptor {
	return c.inters.Reward
}

func (c *RewardClient) mutate(ctx context.Context, m *RewardMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RewardCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RewardUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RewardUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RewardDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Reward mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id uuid.UUID) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id uuid.UUID) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id uuid.UUID) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id uuid.UUID) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCoupons queries the coupons edge of a User.
func (c *UserClient) QueryCoupons(u *User) *CouponQuery {
	query := (&CouponClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(coupon.Table, coupon.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.CouponsTable, user.CouponsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCoinPrograms queries the coin_programs edge of a User.
func (c *UserClient) QueryCoinPrograms(u *User) *CoinProgramParticipantQuery {
	query := (&CoinProgramParticipantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(coinprogramparticipant.Table, coinprogramparticipant.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.CoinProgramsTable, user.CoinProgramsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Business, CoinProgram, CoinProgramParticipant, Coupon, Reward, User []ent.Hook
	}
	inters struct {
		Business, CoinProgram, CoinProgramParticipant, Coupon, Reward,
		User []ent.Interceptor
	}
)

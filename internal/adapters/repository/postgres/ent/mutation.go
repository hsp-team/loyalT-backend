// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"loyalit/internal/adapters/repository/postgres/ent/business"
	"loyalit/internal/adapters/repository/postgres/ent/coinprogram"
	"loyalit/internal/adapters/repository/postgres/ent/coinprogramparticipant"
	"loyalit/internal/adapters/repository/postgres/ent/coupon"
	"loyalit/internal/adapters/repository/postgres/ent/predicate"
	"loyalit/internal/adapters/repository/postgres/ent/reward"
	"loyalit/internal/adapters/repository/postgres/ent/user"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeBusiness               = "Business"
	TypeCoinProgram            = "CoinProgram"
	TypeCoinProgramParticipant = "CoinProgramParticipant"
	TypeCoupon                 = "Coupon"
	TypeReward                 = "Reward"
	TypeUser                   = "User"
)

// BusinessMutation represents an operation that mutates the Business nodes in the graph.
type BusinessMutation struct {
	config
	op                  Op
	typ                 string
	id                  *uuid.UUID
	created_at          *time.Time
	name                *string
	email               *string
	password            *string
	description         *string
	clearedFields       map[string]struct{}
	coin_program        *uuid.UUID
	clearedcoin_program bool
	done                bool
	oldValue            func(context.Context) (*Business, error)
	predicates          []predicate.Business
}

var _ ent.Mutation = (*BusinessMutation)(nil)

// businessOption allows management of the mutation configuration using functional options.
type businessOption func(*BusinessMutation)

// newBusinessMutation creates new mutation for the Business entity.
func newBusinessMutation(c config, op Op, opts ...businessOption) *BusinessMutation {
	m := &BusinessMutation{
		config:        c,
		op:            op,
		typ:           TypeBusiness,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBusinessID sets the ID field of the mutation.
func withBusinessID(id uuid.UUID) businessOption {
	return func(m *BusinessMutation) {
		var (
			err   error
			once  sync.Once
			value *Business
		)
		m.oldValue = func(ctx context.Context) (*Business, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Business.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBusiness sets the old Business of the mutation.
func withBusiness(node *Business) businessOption {
	return func(m *BusinessMutation) {
		m.oldValue = func(context.Context) (*Business, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BusinessMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BusinessMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Business entities.
func (m *BusinessMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *BusinessMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *BusinessMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Business.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *BusinessMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *BusinessMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Business entity.
// If the Business object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BusinessMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *BusinessMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetName sets the "name" field.
func (m *BusinessMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *BusinessMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Business entity.
// If the Business object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BusinessMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *BusinessMutation) ResetName() {
	m.name = nil
}

// SetEmail sets the "email" field.
func (m *BusinessMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *BusinessMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the Business entity.
// If the Business object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BusinessMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *BusinessMutation) ResetEmail() {
	m.email = nil
}

// SetPassword sets the "password" field.
func (m *BusinessMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *BusinessMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the Business entity.
// If the Business object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BusinessMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *BusinessMutation) ResetPassword() {
	m.password = nil
}

// SetDescription sets the "description" field.
func (m *BusinessMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *BusinessMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Business entity.
// If the Business object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BusinessMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *BusinessMutation) ResetDescription() {
	m.description = nil
}

// SetCoinProgramID sets the "coin_program" edge to the CoinProgram entity by id.
func (m *BusinessMutation) SetCoinProgramID(id uuid.UUID) {
	m.coin_program = &id
}

// ClearCoinProgram clears the "coin_program" edge to the CoinProgram entity.
func (m *BusinessMutation) ClearCoinProgram() {
	m.clearedcoin_program = true
}

// CoinProgramCleared reports if the "coin_program" edge to the CoinProgram entity was cleared.
func (m *BusinessMutation) CoinProgramCleared() bool {
	return m.clearedcoin_program
}

// CoinProgramID returns the "coin_program" edge ID in the mutation.
func (m *BusinessMutation) CoinProgramID() (id uuid.UUID, exists bool) {
	if m.coin_program != nil {
		return *m.coin_program, true
	}
	return
}

// CoinProgramIDs returns the "coin_program" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CoinProgramID instead. It exists only for internal usage by the builders.
func (m *BusinessMutation) CoinProgramIDs() (ids []uuid.UUID) {
	if id := m.coin_program; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCoinProgram resets all changes to the "coin_program" edge.
func (m *BusinessMutation) ResetCoinProgram() {
	m.coin_program = nil
	m.clearedcoin_program = false
}

// Where appends a list predicates to the BusinessMutation builder.
func (m *BusinessMutation) Where(ps ...predicate.Business) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the BusinessMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *BusinessMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Business, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *BusinessMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *BusinessMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Business).
func (m *BusinessMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *BusinessMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.created_at != nil {
		fields = append(fields, business.FieldCreatedAt)
	}
	if m.name != nil {
		fields = append(fields, business.FieldName)
	}
	if m.email != nil {
		fields = append(fields, business.FieldEmail)
	}
	if m.password != nil {
		fields = append(fields, business.FieldPassword)
	}
	if m.description != nil {
		fields = append(fields, business.FieldDescription)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *BusinessMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case business.FieldCreatedAt:
		return m.CreatedAt()
	case business.FieldName:
		return m.Name()
	case business.FieldEmail:
		return m.Email()
	case business.FieldPassword:
		return m.Password()
	case business.FieldDescription:
		return m.Description()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *BusinessMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case business.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case business.FieldName:
		return m.OldName(ctx)
	case business.FieldEmail:
		return m.OldEmail(ctx)
	case business.FieldPassword:
		return m.OldPassword(ctx)
	case business.FieldDescription:
		return m.OldDescription(ctx)
	}
	return nil, fmt.Errorf("unknown Business field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BusinessMutation) SetField(name string, value ent.Value) error {
	switch name {
	case business.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case business.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case business.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case business.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case business.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	}
	return fmt.Errorf("unknown Business field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *BusinessMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *BusinessMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BusinessMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Business numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *BusinessMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *BusinessMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *BusinessMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Business nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *BusinessMutation) ResetField(name string) error {
	switch name {
	case business.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case business.FieldName:
		m.ResetName()
		return nil
	case business.FieldEmail:
		m.ResetEmail()
		return nil
	case business.FieldPassword:
		m.ResetPassword()
		return nil
	case business.FieldDescription:
		m.ResetDescription()
		return nil
	}
	return fmt.Errorf("unknown Business field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *BusinessMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.coin_program != nil {
		edges = append(edges, business.EdgeCoinProgram)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *BusinessMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case business.EdgeCoinProgram:
		if id := m.coin_program; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *BusinessMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *BusinessMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *BusinessMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedcoin_program {
		edges = append(edges, business.EdgeCoinProgram)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *BusinessMutation) EdgeCleared(name string) bool {
	switch name {
	case business.EdgeCoinProgram:
		return m.clearedcoin_program
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *BusinessMutation) ClearEdge(name string) error {
	switch name {
	case business.EdgeCoinProgram:
		m.ClearCoinProgram()
		return nil
	}
	return fmt.Errorf("unknown Business unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *BusinessMutation) ResetEdge(name string) error {
	switch name {
	case business.EdgeCoinProgram:
		m.ResetCoinProgram()
		return nil
	}
	return fmt.Errorf("unknown Business edge %s", name)
}

// CoinProgramMutation represents an operation that mutates the CoinProgram nodes in the graph.
type CoinProgramMutation struct {
	config
	op                  Op
	typ                 string
	id                  *uuid.UUID
	created_at          *time.Time
	name                *string
	description         *string
	day_limit           *uint
	addday_limit        *int
	card_color          *string
	clearedFields       map[string]struct{}
	business            *uuid.UUID
	clearedbusiness     bool
	rewards             map[uuid.UUID]struct{}
	removedrewards      map[uuid.UUID]struct{}
	clearedrewards      bool
	participants        map[uuid.UUID]struct{}
	removedparticipants map[uuid.UUID]struct{}
	clearedparticipants bool
	done                bool
	oldValue            func(context.Context) (*CoinProgram, error)
	predicates          []predicate.CoinProgram
}

var _ ent.Mutation = (*CoinProgramMutation)(nil)

// coinprogramOption allows management of the mutation configuration using functional options.
type coinprogramOption func(*CoinProgramMutation)

// newCoinProgramMutation creates new mutation for the CoinProgram entity.
func newCoinProgramMutation(c config, op Op, opts ...coinprogramOption) *CoinProgramMutation {
	m := &CoinProgramMutation{
		config:        c,
		op:            op,
		typ:           TypeCoinProgram,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCoinProgramID sets the ID field of the mutation.
func withCoinProgramID(id uuid.UUID) coinprogramOption {
	return func(m *CoinProgramMutation) {
		var (
			err   error
			once  sync.Once
			value *CoinProgram
		)
		m.oldValue = func(ctx context.Context) (*CoinProgram, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CoinProgram.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCoinProgram sets the old CoinProgram of the mutation.
func withCoinProgram(node *CoinProgram) coinprogramOption {
	return func(m *CoinProgramMutation) {
		m.oldValue = func(context.Context) (*CoinProgram, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CoinProgramMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CoinProgramMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of CoinProgram entities.
func (m *CoinProgramMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CoinProgramMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CoinProgramMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CoinProgram.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *CoinProgramMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CoinProgramMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the CoinProgram entity.
// If the CoinProgram object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinProgramMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CoinProgramMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetName sets the "name" field.
func (m *CoinProgramMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *CoinProgramMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the CoinProgram entity.
// If the CoinProgram object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinProgramMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *CoinProgramMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *CoinProgramMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *CoinProgramMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the CoinProgram entity.
// If the CoinProgram object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinProgramMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *CoinProgramMutation) ResetDescription() {
	m.description = nil
}

// SetDayLimit sets the "day_limit" field.
func (m *CoinProgramMutation) SetDayLimit(u uint) {
	m.day_limit = &u
	m.addday_limit = nil
}

// DayLimit returns the value of the "day_limit" field in the mutation.
func (m *CoinProgramMutation) DayLimit() (r uint, exists bool) {
	v := m.day_limit
	if v == nil {
		return
	}
	return *v, true
}

// OldDayLimit returns the old "day_limit" field's value of the CoinProgram entity.
// If the CoinProgram object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinProgramMutation) OldDayLimit(ctx context.Context) (v uint, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDayLimit is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDayLimit requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDayLimit: %w", err)
	}
	return oldValue.DayLimit, nil
}

// AddDayLimit adds u to the "day_limit" field.
func (m *CoinProgramMutation) AddDayLimit(u int) {
	if m.addday_limit != nil {
		*m.addday_limit += u
	} else {
		m.addday_limit = &u
	}
}

// AddedDayLimit returns the value that was added to the "day_limit" field in this mutation.
func (m *CoinProgramMutation) AddedDayLimit() (r int, exists bool) {
	v := m.addday_limit
	if v == nil {
		return
	}
	return *v, true
}

// ResetDayLimit resets all changes to the "day_limit" field.
func (m *CoinProgramMutation) ResetDayLimit() {
	m.day_limit = nil
	m.addday_limit = nil
}

// SetCardColor sets the "card_color" field.
func (m *CoinProgramMutation) SetCardColor(s string) {
	m.card_color = &s
}

// CardColor returns the value of the "card_color" field in the mutation.
func (m *CoinProgramMutation) CardColor() (r string, exists bool) {
	v := m.card_color
	if v == nil {
		return
	}
	return *v, true
}

// OldCardColor returns the old "card_color" field's value of the CoinProgram entity.
// If the CoinProgram object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinProgramMutation) OldCardColor(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCardColor is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCardColor requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCardColor: %w", err)
	}
	return oldValue.CardColor, nil
}

// ResetCardColor resets all changes to the "card_color" field.
func (m *CoinProgramMutation) ResetCardColor() {
	m.card_color = nil
}

// SetBusinessID sets the "business" edge to the Business entity by id.
func (m *CoinProgramMutation) SetBusinessID(id uuid.UUID) {
	m.business = &id
}

// ClearBusiness clears the "business" edge to the Business entity.
func (m *CoinProgramMutation) ClearBusiness() {
	m.clearedbusiness = true
}

// BusinessCleared reports if the "business" edge to the Business entity was cleared.
func (m *CoinProgramMutation) BusinessCleared() bool {
	return m.clearedbusiness
}

// BusinessID returns the "business" edge ID in the mutation.
func (m *CoinProgramMutation) BusinessID() (id uuid.UUID, exists bool) {
	if m.business != nil {
		return *m.business, true
	}
	return
}

// BusinessIDs returns the "business" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// BusinessID instead. It exists only for internal usage by the builders.
func (m *CoinProgramMutation) BusinessIDs() (ids []uuid.UUID) {
	if id := m.business; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetBusiness resets all changes to the "business" edge.
func (m *CoinProgramMutation) ResetBusiness() {
	m.business = nil
	m.clearedbusiness = false
}

// AddRewardIDs adds the "rewards" edge to the Reward entity by ids.
func (m *CoinProgramMutation) AddRewardIDs(ids ...uuid.UUID) {
	if m.rewards == nil {
		m.rewards = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.rewards[ids[i]] = struct{}{}
	}
}

// ClearRewards clears the "rewards" edge to the Reward entity.
func (m *CoinProgramMutation) ClearRewards() {
	m.clearedrewards = true
}

// RewardsCleared reports if the "rewards" edge to the Reward entity was cleared.
func (m *CoinProgramMutation) RewardsCleared() bool {
	return m.clearedrewards
}

// RemoveRewardIDs removes the "rewards" edge to the Reward entity by IDs.
func (m *CoinProgramMutation) RemoveRewardIDs(ids ...uuid.UUID) {
	if m.removedrewards == nil {
		m.removedrewards = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.rewards, ids[i])
		m.removedrewards[ids[i]] = struct{}{}
	}
}

// RemovedRewards returns the removed IDs of the "rewards" edge to the Reward entity.
func (m *CoinProgramMutation) RemovedRewardsIDs() (ids []uuid.UUID) {
	for id := range m.removedrewards {
		ids = append(ids, id)
	}
	return
}

// RewardsIDs returns the "rewards" edge IDs in the mutation.
func (m *CoinProgramMutation) RewardsIDs() (ids []uuid.UUID) {
	for id := range m.rewards {
		ids = append(ids, id)
	}
	return
}

// ResetRewards resets all changes to the "rewards" edge.
func (m *CoinProgramMutation) ResetRewards() {
	m.rewards = nil
	m.clearedrewards = false
	m.removedrewards = nil
}

// AddParticipantIDs adds the "participants" edge to the CoinProgramParticipant entity by ids.
func (m *CoinProgramMutation) AddParticipantIDs(ids ...uuid.UUID) {
	if m.participants == nil {
		m.participants = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.participants[ids[i]] = struct{}{}
	}
}

// ClearParticipants clears the "participants" edge to the CoinProgramParticipant entity.
func (m *CoinProgramMutation) ClearParticipants() {
	m.clearedparticipants = true
}

// ParticipantsCleared reports if the "participants" edge to the CoinProgramParticipant entity was cleared.
func (m *CoinProgramMutation) ParticipantsCleared() bool {
	return m.clearedparticipants
}

// RemoveParticipantIDs removes the "participants" edge to the CoinProgramParticipant entity by IDs.
func (m *CoinProgramMutation) RemoveParticipantIDs(ids ...uuid.UUID) {
	if m.removedparticipants == nil {
		m.removedparticipants = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.participants, ids[i])
		m.removedparticipants[ids[i]] = struct{}{}
	}
}

// RemovedParticipants returns the removed IDs of the "participants" edge to the CoinProgramParticipant entity.
func (m *CoinProgramMutation) RemovedParticipantsIDs() (ids []uuid.UUID) {
	for id := range m.removedparticipants {
		ids = append(ids, id)
	}
	return
}

// ParticipantsIDs returns the "participants" edge IDs in the mutation.
func (m *CoinProgramMutation) ParticipantsIDs() (ids []uuid.UUID) {
	for id := range m.participants {
		ids = append(ids, id)
	}
	return
}

// ResetParticipants resets all changes to the "participants" edge.
func (m *CoinProgramMutation) ResetParticipants() {
	m.participants = nil
	m.clearedparticipants = false
	m.removedparticipants = nil
}

// Where appends a list predicates to the CoinProgramMutation builder.
func (m *CoinProgramMutation) Where(ps ...predicate.CoinProgram) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CoinProgramMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CoinProgramMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.CoinProgram, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CoinProgramMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CoinProgramMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (CoinProgram).
func (m *CoinProgramMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CoinProgramMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.created_at != nil {
		fields = append(fields, coinprogram.FieldCreatedAt)
	}
	if m.name != nil {
		fields = append(fields, coinprogram.FieldName)
	}
	if m.description != nil {
		fields = append(fields, coinprogram.FieldDescription)
	}
	if m.day_limit != nil {
		fields = append(fields, coinprogram.FieldDayLimit)
	}
	if m.card_color != nil {
		fields = append(fields, coinprogram.FieldCardColor)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CoinProgramMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case coinprogram.FieldCreatedAt:
		return m.CreatedAt()
	case coinprogram.FieldName:
		return m.Name()
	case coinprogram.FieldDescription:
		return m.Description()
	case coinprogram.FieldDayLimit:
		return m.DayLimit()
	case coinprogram.FieldCardColor:
		return m.CardColor()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CoinProgramMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case coinprogram.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case coinprogram.FieldName:
		return m.OldName(ctx)
	case coinprogram.FieldDescription:
		return m.OldDescription(ctx)
	case coinprogram.FieldDayLimit:
		return m.OldDayLimit(ctx)
	case coinprogram.FieldCardColor:
		return m.OldCardColor(ctx)
	}
	return nil, fmt.Errorf("unknown CoinProgram field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CoinProgramMutation) SetField(name string, value ent.Value) error {
	switch name {
	case coinprogram.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case coinprogram.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case coinprogram.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case coinprogram.FieldDayLimit:
		v, ok := value.(uint)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDayLimit(v)
		return nil
	case coinprogram.FieldCardColor:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCardColor(v)
		return nil
	}
	return fmt.Errorf("unknown CoinProgram field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CoinProgramMutation) AddedFields() []string {
	var fields []string
	if m.addday_limit != nil {
		fields = append(fields, coinprogram.FieldDayLimit)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CoinProgramMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case coinprogram.FieldDayLimit:
		return m.AddedDayLimit()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CoinProgramMutation) AddField(name string, value ent.Value) error {
	switch name {
	case coinprogram.FieldDayLimit:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDayLimit(v)
		return nil
	}
	return fmt.Errorf("unknown CoinProgram numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CoinProgramMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CoinProgramMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CoinProgramMutation) ClearField(name string) error {
	return fmt.Errorf("unknown CoinProgram nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CoinProgramMutation) ResetField(name string) error {
	switch name {
	case coinprogram.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case coinprogram.FieldName:
		m.ResetName()
		return nil
	case coinprogram.FieldDescription:
		m.ResetDescription()
		return nil
	case coinprogram.FieldDayLimit:
		m.ResetDayLimit()
		return nil
	case coinprogram.FieldCardColor:
		m.ResetCardColor()
		return nil
	}
	return fmt.Errorf("unknown CoinProgram field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CoinProgramMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.business != nil {
		edges = append(edges, coinprogram.EdgeBusiness)
	}
	if m.rewards != nil {
		edges = append(edges, coinprogram.EdgeRewards)
	}
	if m.participants != nil {
		edges = append(edges, coinprogram.EdgeParticipants)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CoinProgramMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case coinprogram.EdgeBusiness:
		if id := m.business; id != nil {
			return []ent.Value{*id}
		}
	case coinprogram.EdgeRewards:
		ids := make([]ent.Value, 0, len(m.rewards))
		for id := range m.rewards {
			ids = append(ids, id)
		}
		return ids
	case coinprogram.EdgeParticipants:
		ids := make([]ent.Value, 0, len(m.participants))
		for id := range m.participants {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CoinProgramMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedrewards != nil {
		edges = append(edges, coinprogram.EdgeRewards)
	}
	if m.removedparticipants != nil {
		edges = append(edges, coinprogram.EdgeParticipants)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CoinProgramMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case coinprogram.EdgeRewards:
		ids := make([]ent.Value, 0, len(m.removedrewards))
		for id := range m.removedrewards {
			ids = append(ids, id)
		}
		return ids
	case coinprogram.EdgeParticipants:
		ids := make([]ent.Value, 0, len(m.removedparticipants))
		for id := range m.removedparticipants {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CoinProgramMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedbusiness {
		edges = append(edges, coinprogram.EdgeBusiness)
	}
	if m.clearedrewards {
		edges = append(edges, coinprogram.EdgeRewards)
	}
	if m.clearedparticipants {
		edges = append(edges, coinprogram.EdgeParticipants)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CoinProgramMutation) EdgeCleared(name string) bool {
	switch name {
	case coinprogram.EdgeBusiness:
		return m.clearedbusiness
	case coinprogram.EdgeRewards:
		return m.clearedrewards
	case coinprogram.EdgeParticipants:
		return m.clearedparticipants
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CoinProgramMutation) ClearEdge(name string) error {
	switch name {
	case coinprogram.EdgeBusiness:
		m.ClearBusiness()
		return nil
	}
	return fmt.Errorf("unknown CoinProgram unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CoinProgramMutation) ResetEdge(name string) error {
	switch name {
	case coinprogram.EdgeBusiness:
		m.ResetBusiness()
		return nil
	case coinprogram.EdgeRewards:
		m.ResetRewards()
		return nil
	case coinprogram.EdgeParticipants:
		m.ResetParticipants()
		return nil
	}
	return fmt.Errorf("unknown CoinProgram edge %s", name)
}

// CoinProgramParticipantMutation represents an operation that mutates the CoinProgramParticipant nodes in the graph.
type CoinProgramParticipantMutation struct {
	config
	op                  Op
	typ                 string
	id                  *uuid.UUID
	created_at          *time.Time
	balance             *uint
	addbalance          *int
	clearedFields       map[string]struct{}
	coin_program        *uuid.UUID
	clearedcoin_program bool
	user                *uuid.UUID
	cleareduser         bool
	done                bool
	oldValue            func(context.Context) (*CoinProgramParticipant, error)
	predicates          []predicate.CoinProgramParticipant
}

var _ ent.Mutation = (*CoinProgramParticipantMutation)(nil)

// coinprogramparticipantOption allows management of the mutation configuration using functional options.
type coinprogramparticipantOption func(*CoinProgramParticipantMutation)

// newCoinProgramParticipantMutation creates new mutation for the CoinProgramParticipant entity.
func newCoinProgramParticipantMutation(c config, op Op, opts ...coinprogramparticipantOption) *CoinProgramParticipantMutation {
	m := &CoinProgramParticipantMutation{
		config:        c,
		op:            op,
		typ:           TypeCoinProgramParticipant,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCoinProgramParticipantID sets the ID field of the mutation.
func withCoinProgramParticipantID(id uuid.UUID) coinprogramparticipantOption {
	return func(m *CoinProgramParticipantMutation) {
		var (
			err   error
			once  sync.Once
			value *CoinProgramParticipant
		)
		m.oldValue = func(ctx context.Context) (*CoinProgramParticipant, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CoinProgramParticipant.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCoinProgramParticipant sets the old CoinProgramParticipant of the mutation.
func withCoinProgramParticipant(node *CoinProgramParticipant) coinprogramparticipantOption {
	return func(m *CoinProgramParticipantMutation) {
		m.oldValue = func(context.Context) (*CoinProgramParticipant, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CoinProgramParticipantMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CoinProgramParticipantMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of CoinProgramParticipant entities.
func (m *CoinProgramParticipantMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CoinProgramParticipantMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CoinProgramParticipantMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CoinProgramParticipant.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *CoinProgramParticipantMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CoinProgramParticipantMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the CoinProgramParticipant entity.
// If the CoinProgramParticipant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinProgramParticipantMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CoinProgramParticipantMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetBalance sets the "balance" field.
func (m *CoinProgramParticipantMutation) SetBalance(u uint) {
	m.balance = &u
	m.addbalance = nil
}

// Balance returns the value of the "balance" field in the mutation.
func (m *CoinProgramParticipantMutation) Balance() (r uint, exists bool) {
	v := m.balance
	if v == nil {
		return
	}
	return *v, true
}

// OldBalance returns the old "balance" field's value of the CoinProgramParticipant entity.
// If the CoinProgramParticipant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinProgramParticipantMutation) OldBalance(ctx context.Context) (v uint, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBalance is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBalance requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBalance: %w", err)
	}
	return oldValue.Balance, nil
}

// AddBalance adds u to the "balance" field.
func (m *CoinProgramParticipantMutation) AddBalance(u int) {
	if m.addbalance != nil {
		*m.addbalance += u
	} else {
		m.addbalance = &u
	}
}

// AddedBalance returns the value that was added to the "balance" field in this mutation.
func (m *CoinProgramParticipantMutation) AddedBalance() (r int, exists bool) {
	v := m.addbalance
	if v == nil {
		return
	}
	return *v, true
}

// ResetBalance resets all changes to the "balance" field.
func (m *CoinProgramParticipantMutation) ResetBalance() {
	m.balance = nil
	m.addbalance = nil
}

// SetCoinProgramID sets the "coin_program" edge to the CoinProgram entity by id.
func (m *CoinProgramParticipantMutation) SetCoinProgramID(id uuid.UUID) {
	m.coin_program = &id
}

// ClearCoinProgram clears the "coin_program" edge to the CoinProgram entity.
func (m *CoinProgramParticipantMutation) ClearCoinProgram() {
	m.clearedcoin_program = true
}

// CoinProgramCleared reports if the "coin_program" edge to the CoinProgram entity was cleared.
func (m *CoinProgramParticipantMutation) CoinProgramCleared() bool {
	return m.clearedcoin_program
}

// CoinProgramID returns the "coin_program" edge ID in the mutation.
func (m *CoinProgramParticipantMutation) CoinProgramID() (id uuid.UUID, exists bool) {
	if m.coin_program != nil {
		return *m.coin_program, true
	}
	return
}

// CoinProgramIDs returns the "coin_program" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CoinProgramID instead. It exists only for internal usage by the builders.
func (m *CoinProgramParticipantMutation) CoinProgramIDs() (ids []uuid.UUID) {
	if id := m.coin_program; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCoinProgram resets all changes to the "coin_program" edge.
func (m *CoinProgramParticipantMutation) ResetCoinProgram() {
	m.coin_program = nil
	m.clearedcoin_program = false
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *CoinProgramParticipantMutation) SetUserID(id uuid.UUID) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *CoinProgramParticipantMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *CoinProgramParticipantMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *CoinProgramParticipantMutation) UserID() (id uuid.UUID, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *CoinProgramParticipantMutation) UserIDs() (ids []uuid.UUID) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *CoinProgramParticipantMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the CoinProgramParticipantMutation builder.
func (m *CoinProgramParticipantMutation) Where(ps ...predicate.CoinProgramParticipant) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CoinProgramParticipantMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CoinProgramParticipantMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.CoinProgramParticipant, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CoinProgramParticipantMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CoinProgramParticipantMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (CoinProgramParticipant).
func (m *CoinProgramParticipantMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CoinProgramParticipantMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.created_at != nil {
		fields = append(fields, coinprogramparticipant.FieldCreatedAt)
	}
	if m.balance != nil {
		fields = append(fields, coinprogramparticipant.FieldBalance)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CoinProgramParticipantMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case coinprogramparticipant.FieldCreatedAt:
		return m.CreatedAt()
	case coinprogramparticipant.FieldBalance:
		return m.Balance()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CoinProgramParticipantMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case coinprogramparticipant.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case coinprogramparticipant.FieldBalance:
		return m.OldBalance(ctx)
	}
	return nil, fmt.Errorf("unknown CoinProgramParticipant field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CoinProgramParticipantMutation) SetField(name string, value ent.Value) error {
	switch name {
	case coinprogramparticipant.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case coinprogramparticipant.FieldBalance:
		v, ok := value.(uint)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBalance(v)
		return nil
	}
	return fmt.Errorf("unknown CoinProgramParticipant field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CoinProgramParticipantMutation) AddedFields() []string {
	var fields []string
	if m.addbalance != nil {
		fields = append(fields, coinprogramparticipant.FieldBalance)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CoinProgramParticipantMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case coinprogramparticipant.FieldBalance:
		return m.AddedBalance()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CoinProgramParticipantMutation) AddField(name string, value ent.Value) error {
	switch name {
	case coinprogramparticipant.FieldBalance:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBalance(v)
		return nil
	}
	return fmt.Errorf("unknown CoinProgramParticipant numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CoinProgramParticipantMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CoinProgramParticipantMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CoinProgramParticipantMutation) ClearField(name string) error {
	return fmt.Errorf("unknown CoinProgramParticipant nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CoinProgramParticipantMutation) ResetField(name string) error {
	switch name {
	case coinprogramparticipant.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case coinprogramparticipant.FieldBalance:
		m.ResetBalance()
		return nil
	}
	return fmt.Errorf("unknown CoinProgramParticipant field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CoinProgramParticipantMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.coin_program != nil {
		edges = append(edges, coinprogramparticipant.EdgeCoinProgram)
	}
	if m.user != nil {
		edges = append(edges, coinprogramparticipant.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CoinProgramParticipantMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case coinprogramparticipant.EdgeCoinProgram:
		if id := m.coin_program; id != nil {
			return []ent.Value{*id}
		}
	case coinprogramparticipant.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CoinProgramParticipantMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CoinProgramParticipantMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CoinProgramParticipantMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedcoin_program {
		edges = append(edges, coinprogramparticipant.EdgeCoinProgram)
	}
	if m.cleareduser {
		edges = append(edges, coinprogramparticipant.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CoinProgramParticipantMutation) EdgeCleared(name string) bool {
	switch name {
	case coinprogramparticipant.EdgeCoinProgram:
		return m.clearedcoin_program
	case coinprogramparticipant.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CoinProgramParticipantMutation) ClearEdge(name string) error {
	switch name {
	case coinprogramparticipant.EdgeCoinProgram:
		m.ClearCoinProgram()
		return nil
	case coinprogramparticipant.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown CoinProgramParticipant unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CoinProgramParticipantMutation) ResetEdge(name string) error {
	switch name {
	case coinprogramparticipant.EdgeCoinProgram:
		m.ResetCoinProgram()
		return nil
	case coinprogramparticipant.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown CoinProgramParticipant edge %s", name)
}

// CouponMutation represents an operation that mutates the Coupon nodes in the graph.
type CouponMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	created_at    *time.Time
	code          *string
	activated     *bool
	clearedFields map[string]struct{}
	owner         *uuid.UUID
	clearedowner  bool
	reward        *uuid.UUID
	clearedreward bool
	done          bool
	oldValue      func(context.Context) (*Coupon, error)
	predicates    []predicate.Coupon
}

var _ ent.Mutation = (*CouponMutation)(nil)

// couponOption allows management of the mutation configuration using functional options.
type couponOption func(*CouponMutation)

// newCouponMutation creates new mutation for the Coupon entity.
func newCouponMutation(c config, op Op, opts ...couponOption) *CouponMutation {
	m := &CouponMutation{
		config:        c,
		op:            op,
		typ:           TypeCoupon,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCouponID sets the ID field of the mutation.
func withCouponID(id uuid.UUID) couponOption {
	return func(m *CouponMutation) {
		var (
			err   error
			once  sync.Once
			value *Coupon
		)
		m.oldValue = func(ctx context.Context) (*Coupon, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Coupon.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCoupon sets the old Coupon of the mutation.
func withCoupon(node *Coupon) couponOption {
	return func(m *CouponMutation) {
		m.oldValue = func(context.Context) (*Coupon, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CouponMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CouponMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Coupon entities.
func (m *CouponMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CouponMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CouponMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Coupon.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *CouponMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CouponMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Coupon entity.
// If the Coupon object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CouponMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetCode sets the "code" field.
func (m *CouponMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *CouponMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the Coupon entity.
// If the Coupon object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponMutation) OldCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ResetCode resets all changes to the "code" field.
func (m *CouponMutation) ResetCode() {
	m.code = nil
}

// SetActivated sets the "activated" field.
func (m *CouponMutation) SetActivated(b bool) {
	m.activated = &b
}

// Activated returns the value of the "activated" field in the mutation.
func (m *CouponMutation) Activated() (r bool, exists bool) {
	v := m.activated
	if v == nil {
		return
	}
	return *v, true
}

// OldActivated returns the old "activated" field's value of the Coupon entity.
// If the Coupon object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponMutation) OldActivated(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActivated is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActivated requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActivated: %w", err)
	}
	return oldValue.Activated, nil
}

// ResetActivated resets all changes to the "activated" field.
func (m *CouponMutation) ResetActivated() {
	m.activated = nil
}

// SetOwnerID sets the "owner" edge to the User entity by id.
func (m *CouponMutation) SetOwnerID(id uuid.UUID) {
	m.owner = &id
}

// ClearOwner clears the "owner" edge to the User entity.
func (m *CouponMutation) ClearOwner() {
	m.clearedowner = true
}

// OwnerCleared reports if the "owner" edge to the User entity was cleared.
func (m *CouponMutation) OwnerCleared() bool {
	return m.clearedowner
}

// OwnerID returns the "owner" edge ID in the mutation.
func (m *CouponMutation) OwnerID() (id uuid.UUID, exists bool) {
	if m.owner != nil {
		return *m.owner, true
	}
	return
}

// OwnerIDs returns the "owner" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OwnerID instead. It exists only for internal usage by the builders.
func (m *CouponMutation) OwnerIDs() (ids []uuid.UUID) {
	if id := m.owner; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOwner resets all changes to the "owner" edge.
func (m *CouponMutation) ResetOwner() {
	m.owner = nil
	m.clearedowner = false
}

// SetRewardID sets the "reward" edge to the Reward entity by id.
func (m *CouponMutation) SetRewardID(id uuid.UUID) {
	m.reward = &id
}

// ClearReward clears the "reward" edge to the Reward entity.
func (m *CouponMutation) ClearReward() {
	m.clearedreward = true
}

// RewardCleared reports if the "reward" edge to the Reward entity was cleared.
func (m *CouponMutation) RewardCleared() bool {
	return m.clearedreward
}

// RewardID returns the "reward" edge ID in the mutation.
func (m *CouponMutation) RewardID() (id uuid.UUID, exists bool) {
	if m.reward != nil {
		return *m.reward, true
	}
	return
}

// RewardIDs returns the "reward" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RewardID instead. It exists only for internal usage by the builders.
func (m *CouponMutation) RewardIDs() (ids []uuid.UUID) {
	if id := m.reward; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetReward resets all changes to the "reward" edge.
func (m *CouponMutation) ResetReward() {
	m.reward = nil
	m.clearedreward = false
}

// Where appends a list predicates to the CouponMutation builder.
func (m *CouponMutation) Where(ps ...predicate.Coupon) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CouponMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CouponMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Coupon, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CouponMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CouponMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Coupon).
func (m *CouponMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CouponMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.created_at != nil {
		fields = append(fields, coupon.FieldCreatedAt)
	}
	if m.code != nil {
		fields = append(fields, coupon.FieldCode)
	}
	if m.activated != nil {
		fields = append(fields, coupon.FieldActivated)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CouponMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case coupon.FieldCreatedAt:
		return m.CreatedAt()
	case coupon.FieldCode:
		return m.Code()
	case coupon.FieldActivated:
		return m.Activated()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CouponMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case coupon.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case coupon.FieldCode:
		return m.OldCode(ctx)
	case coupon.FieldActivated:
		return m.OldActivated(ctx)
	}
	return nil, fmt.Errorf("unknown Coupon field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CouponMutation) SetField(name string, value ent.Value) error {
	switch name {
	case coupon.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case coupon.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case coupon.FieldActivated:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActivated(v)
		return nil
	}
	return fmt.Errorf("unknown Coupon field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CouponMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CouponMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CouponMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Coupon numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CouponMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CouponMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CouponMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Coupon nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CouponMutation) ResetField(name string) error {
	switch name {
	case coupon.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case coupon.FieldCode:
		m.ResetCode()
		return nil
	case coupon.FieldActivated:
		m.ResetActivated()
		return nil
	}
	return fmt.Errorf("unknown Coupon field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CouponMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.owner != nil {
		edges = append(edges, coupon.EdgeOwner)
	}
	if m.reward != nil {
		edges = append(edges, coupon.EdgeReward)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CouponMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case coupon.EdgeOwner:
		if id := m.owner; id != nil {
			return []ent.Value{*id}
		}
	case coupon.EdgeReward:
		if id := m.reward; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CouponMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CouponMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CouponMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedowner {
		edges = append(edges, coupon.EdgeOwner)
	}
	if m.clearedreward {
		edges = append(edges, coupon.EdgeReward)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CouponMutation) EdgeCleared(name string) bool {
	switch name {
	case coupon.EdgeOwner:
		return m.clearedowner
	case coupon.EdgeReward:
		return m.clearedreward
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CouponMutation) ClearEdge(name string) error {
	switch name {
	case coupon.EdgeOwner:
		m.ClearOwner()
		return nil
	case coupon.EdgeReward:
		m.ClearReward()
		return nil
	}
	return fmt.Errorf("unknown Coupon unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CouponMutation) ResetEdge(name string) error {
	switch name {
	case coupon.EdgeOwner:
		m.ResetOwner()
		return nil
	case coupon.EdgeReward:
		m.ResetReward()
		return nil
	}
	return fmt.Errorf("unknown Coupon edge %s", name)
}

// RewardMutation represents an operation that mutates the Reward nodes in the graph.
type RewardMutation struct {
	config
	op                  Op
	typ                 string
	id                  *uuid.UUID
	created_at          *time.Time
	name                *string
	description         *string
	cost                *uint
	addcost             *int
	image_url           *string
	clearedFields       map[string]struct{}
	coin_program        *uuid.UUID
	clearedcoin_program bool
	rewards             map[uuid.UUID]struct{}
	removedrewards      map[uuid.UUID]struct{}
	clearedrewards      bool
	done                bool
	oldValue            func(context.Context) (*Reward, error)
	predicates          []predicate.Reward
}

var _ ent.Mutation = (*RewardMutation)(nil)

// rewardOption allows management of the mutation configuration using functional options.
type rewardOption func(*RewardMutation)

// newRewardMutation creates new mutation for the Reward entity.
func newRewardMutation(c config, op Op, opts ...rewardOption) *RewardMutation {
	m := &RewardMutation{
		config:        c,
		op:            op,
		typ:           TypeReward,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRewardID sets the ID field of the mutation.
func withRewardID(id uuid.UUID) rewardOption {
	return func(m *RewardMutation) {
		var (
			err   error
			once  sync.Once
			value *Reward
		)
		m.oldValue = func(ctx context.Context) (*Reward, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Reward.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withReward sets the old Reward of the mutation.
func withReward(node *Reward) rewardOption {
	return func(m *RewardMutation) {
		m.oldValue = func(context.Context) (*Reward, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RewardMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RewardMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Reward entities.
func (m *RewardMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RewardMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RewardMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Reward.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *RewardMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *RewardMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Reward entity.
// If the Reward object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RewardMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *RewardMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetName sets the "name" field.
func (m *RewardMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *RewardMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Reward entity.
// If the Reward object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RewardMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *RewardMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *RewardMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *RewardMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Reward entity.
// If the Reward object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RewardMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *RewardMutation) ResetDescription() {
	m.description = nil
}

// SetCost sets the "cost" field.
func (m *RewardMutation) SetCost(u uint) {
	m.cost = &u
	m.addcost = nil
}

// Cost returns the value of the "cost" field in the mutation.
func (m *RewardMutation) Cost() (r uint, exists bool) {
	v := m.cost
	if v == nil {
		return
	}
	return *v, true
}

// OldCost returns the old "cost" field's value of the Reward entity.
// If the Reward object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RewardMutation) OldCost(ctx context.Context) (v uint, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCost is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCost requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCost: %w", err)
	}
	return oldValue.Cost, nil
}

// AddCost adds u to the "cost" field.
func (m *RewardMutation) AddCost(u int) {
	if m.addcost != nil {
		*m.addcost += u
	} else {
		m.addcost = &u
	}
}

// AddedCost returns the value that was added to the "cost" field in this mutation.
func (m *RewardMutation) AddedCost() (r int, exists bool) {
	v := m.addcost
	if v == nil {
		return
	}
	return *v, true
}

// ResetCost resets all changes to the "cost" field.
func (m *RewardMutation) ResetCost() {
	m.cost = nil
	m.addcost = nil
}

// SetImageURL sets the "image_url" field.
func (m *RewardMutation) SetImageURL(s string) {
	m.image_url = &s
}

// ImageURL returns the value of the "image_url" field in the mutation.
func (m *RewardMutation) ImageURL() (r string, exists bool) {
	v := m.image_url
	if v == nil {
		return
	}
	return *v, true
}

// OldImageURL returns the old "image_url" field's value of the Reward entity.
// If the Reward object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RewardMutation) OldImageURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImageURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImageURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImageURL: %w", err)
	}
	return oldValue.ImageURL, nil
}

// ResetImageURL resets all changes to the "image_url" field.
func (m *RewardMutation) ResetImageURL() {
	m.image_url = nil
}

// SetCoinProgramID sets the "coin_program" edge to the CoinProgram entity by id.
func (m *RewardMutation) SetCoinProgramID(id uuid.UUID) {
	m.coin_program = &id
}

// ClearCoinProgram clears the "coin_program" edge to the CoinProgram entity.
func (m *RewardMutation) ClearCoinProgram() {
	m.clearedcoin_program = true
}

// CoinProgramCleared reports if the "coin_program" edge to the CoinProgram entity was cleared.
func (m *RewardMutation) CoinProgramCleared() bool {
	return m.clearedcoin_program
}

// CoinProgramID returns the "coin_program" edge ID in the mutation.
func (m *RewardMutation) CoinProgramID() (id uuid.UUID, exists bool) {
	if m.coin_program != nil {
		return *m.coin_program, true
	}
	return
}

// CoinProgramIDs returns the "coin_program" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CoinProgramID instead. It exists only for internal usage by the builders.
func (m *RewardMutation) CoinProgramIDs() (ids []uuid.UUID) {
	if id := m.coin_program; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCoinProgram resets all changes to the "coin_program" edge.
func (m *RewardMutation) ResetCoinProgram() {
	m.coin_program = nil
	m.clearedcoin_program = false
}

// AddRewardIDs adds the "rewards" edge to the Coupon entity by ids.
func (m *RewardMutation) AddRewardIDs(ids ...uuid.UUID) {
	if m.rewards == nil {
		m.rewards = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.rewards[ids[i]] = struct{}{}
	}
}

// ClearRewards clears the "rewards" edge to the Coupon entity.
func (m *RewardMutation) ClearRewards() {
	m.clearedrewards = true
}

// RewardsCleared reports if the "rewards" edge to the Coupon entity was cleared.
func (m *RewardMutation) RewardsCleared() bool {
	return m.clearedrewards
}

// RemoveRewardIDs removes the "rewards" edge to the Coupon entity by IDs.
func (m *RewardMutation) RemoveRewardIDs(ids ...uuid.UUID) {
	if m.removedrewards == nil {
		m.removedrewards = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.rewards, ids[i])
		m.removedrewards[ids[i]] = struct{}{}
	}
}

// RemovedRewards returns the removed IDs of the "rewards" edge to the Coupon entity.
func (m *RewardMutation) RemovedRewardsIDs() (ids []uuid.UUID) {
	for id := range m.removedrewards {
		ids = append(ids, id)
	}
	return
}

// RewardsIDs returns the "rewards" edge IDs in the mutation.
func (m *RewardMutation) RewardsIDs() (ids []uuid.UUID) {
	for id := range m.rewards {
		ids = append(ids, id)
	}
	return
}

// ResetRewards resets all changes to the "rewards" edge.
func (m *RewardMutation) ResetRewards() {
	m.rewards = nil
	m.clearedrewards = false
	m.removedrewards = nil
}

// Where appends a list predicates to the RewardMutation builder.
func (m *RewardMutation) Where(ps ...predicate.Reward) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the RewardMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *RewardMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Reward, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *RewardMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *RewardMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Reward).
func (m *RewardMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RewardMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.created_at != nil {
		fields = append(fields, reward.FieldCreatedAt)
	}
	if m.name != nil {
		fields = append(fields, reward.FieldName)
	}
	if m.description != nil {
		fields = append(fields, reward.FieldDescription)
	}
	if m.cost != nil {
		fields = append(fields, reward.FieldCost)
	}
	if m.image_url != nil {
		fields = append(fields, reward.FieldImageURL)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RewardMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case reward.FieldCreatedAt:
		return m.CreatedAt()
	case reward.FieldName:
		return m.Name()
	case reward.FieldDescription:
		return m.Description()
	case reward.FieldCost:
		return m.Cost()
	case reward.FieldImageURL:
		return m.ImageURL()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RewardMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case reward.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case reward.FieldName:
		return m.OldName(ctx)
	case reward.FieldDescription:
		return m.OldDescription(ctx)
	case reward.FieldCost:
		return m.OldCost(ctx)
	case reward.FieldImageURL:
		return m.OldImageURL(ctx)
	}
	return nil, fmt.Errorf("unknown Reward field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RewardMutation) SetField(name string, value ent.Value) error {
	switch name {
	case reward.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case reward.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case reward.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case reward.FieldCost:
		v, ok := value.(uint)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCost(v)
		return nil
	case reward.FieldImageURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImageURL(v)
		return nil
	}
	return fmt.Errorf("unknown Reward field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RewardMutation) AddedFields() []string {
	var fields []string
	if m.addcost != nil {
		fields = append(fields, reward.FieldCost)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RewardMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case reward.FieldCost:
		return m.AddedCost()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RewardMutation) AddField(name string, value ent.Value) error {
	switch name {
	case reward.FieldCost:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCost(v)
		return nil
	}
	return fmt.Errorf("unknown Reward numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RewardMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RewardMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RewardMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Reward nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RewardMutation) ResetField(name string) error {
	switch name {
	case reward.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case reward.FieldName:
		m.ResetName()
		return nil
	case reward.FieldDescription:
		m.ResetDescription()
		return nil
	case reward.FieldCost:
		m.ResetCost()
		return nil
	case reward.FieldImageURL:
		m.ResetImageURL()
		return nil
	}
	return fmt.Errorf("unknown Reward field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RewardMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.coin_program != nil {
		edges = append(edges, reward.EdgeCoinProgram)
	}
	if m.rewards != nil {
		edges = append(edges, reward.EdgeRewards)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RewardMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case reward.EdgeCoinProgram:
		if id := m.coin_program; id != nil {
			return []ent.Value{*id}
		}
	case reward.EdgeRewards:
		ids := make([]ent.Value, 0, len(m.rewards))
		for id := range m.rewards {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RewardMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedrewards != nil {
		edges = append(edges, reward.EdgeRewards)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RewardMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case reward.EdgeRewards:
		ids := make([]ent.Value, 0, len(m.removedrewards))
		for id := range m.removedrewards {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RewardMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedcoin_program {
		edges = append(edges, reward.EdgeCoinProgram)
	}
	if m.clearedrewards {
		edges = append(edges, reward.EdgeRewards)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RewardMutation) EdgeCleared(name string) bool {
	switch name {
	case reward.EdgeCoinProgram:
		return m.clearedcoin_program
	case reward.EdgeRewards:
		return m.clearedrewards
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RewardMutation) ClearEdge(name string) error {
	switch name {
	case reward.EdgeCoinProgram:
		m.ClearCoinProgram()
		return nil
	}
	return fmt.Errorf("unknown Reward unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RewardMutation) ResetEdge(name string) error {
	switch name {
	case reward.EdgeCoinProgram:
		m.ResetCoinProgram()
		return nil
	case reward.EdgeRewards:
		m.ResetRewards()
		return nil
	}
	return fmt.Errorf("unknown Reward edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                   Op
	typ                  string
	id                   *uuid.UUID
	created_at           *time.Time
	name                 *string
	email                *string
	password             *string
	qr_data              *string
	clearedFields        map[string]struct{}
	coupons              map[uuid.UUID]struct{}
	removedcoupons       map[uuid.UUID]struct{}
	clearedcoupons       bool
	coin_programs        map[uuid.UUID]struct{}
	removedcoin_programs map[uuid.UUID]struct{}
	clearedcoin_programs bool
	done                 bool
	oldValue             func(context.Context) (*User, error)
	predicates           []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id uuid.UUID) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetName sets the "name" field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// SetQrData sets the "qr_data" field.
func (m *UserMutation) SetQrData(s string) {
	m.qr_data = &s
}

// QrData returns the value of the "qr_data" field in the mutation.
func (m *UserMutation) QrData() (r string, exists bool) {
	v := m.qr_data
	if v == nil {
		return
	}
	return *v, true
}

// OldQrData returns the old "qr_data" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldQrData(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldQrData is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldQrData requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldQrData: %w", err)
	}
	return oldValue.QrData, nil
}

// ClearQrData clears the value of the "qr_data" field.
func (m *UserMutation) ClearQrData() {
	m.qr_data = nil
	m.clearedFields[user.FieldQrData] = struct{}{}
}

// QrDataCleared returns if the "qr_data" field was cleared in this mutation.
func (m *UserMutation) QrDataCleared() bool {
	_, ok := m.clearedFields[user.FieldQrData]
	return ok
}

// ResetQrData resets all changes to the "qr_data" field.
func (m *UserMutation) ResetQrData() {
	m.qr_data = nil
	delete(m.clearedFields, user.FieldQrData)
}

// AddCouponIDs adds the "coupons" edge to the Coupon entity by ids.
func (m *UserMutation) AddCouponIDs(ids ...uuid.UUID) {
	if m.coupons == nil {
		m.coupons = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.coupons[ids[i]] = struct{}{}
	}
}

// ClearCoupons clears the "coupons" edge to the Coupon entity.
func (m *UserMutation) ClearCoupons() {
	m.clearedcoupons = true
}

// CouponsCleared reports if the "coupons" edge to the Coupon entity was cleared.
func (m *UserMutation) CouponsCleared() bool {
	return m.clearedcoupons
}

// RemoveCouponIDs removes the "coupons" edge to the Coupon entity by IDs.
func (m *UserMutation) RemoveCouponIDs(ids ...uuid.UUID) {
	if m.removedcoupons == nil {
		m.removedcoupons = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.coupons, ids[i])
		m.removedcoupons[ids[i]] = struct{}{}
	}
}

// RemovedCoupons returns the removed IDs of the "coupons" edge to the Coupon entity.
func (m *UserMutation) RemovedCouponsIDs() (ids []uuid.UUID) {
	for id := range m.removedcoupons {
		ids = append(ids, id)
	}
	return
}

// CouponsIDs returns the "coupons" edge IDs in the mutation.
func (m *UserMutation) CouponsIDs() (ids []uuid.UUID) {
	for id := range m.coupons {
		ids = append(ids, id)
	}
	return
}

// ResetCoupons resets all changes to the "coupons" edge.
func (m *UserMutation) ResetCoupons() {
	m.coupons = nil
	m.clearedcoupons = false
	m.removedcoupons = nil
}

// AddCoinProgramIDs adds the "coin_programs" edge to the CoinProgramParticipant entity by ids.
func (m *UserMutation) AddCoinProgramIDs(ids ...uuid.UUID) {
	if m.coin_programs == nil {
		m.coin_programs = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.coin_programs[ids[i]] = struct{}{}
	}
}

// ClearCoinPrograms clears the "coin_programs" edge to the CoinProgramParticipant entity.
func (m *UserMutation) ClearCoinPrograms() {
	m.clearedcoin_programs = true
}

// CoinProgramsCleared reports if the "coin_programs" edge to the CoinProgramParticipant entity was cleared.
func (m *UserMutation) CoinProgramsCleared() bool {
	return m.clearedcoin_programs
}

// RemoveCoinProgramIDs removes the "coin_programs" edge to the CoinProgramParticipant entity by IDs.
func (m *UserMutation) RemoveCoinProgramIDs(ids ...uuid.UUID) {
	if m.removedcoin_programs == nil {
		m.removedcoin_programs = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.coin_programs, ids[i])
		m.removedcoin_programs[ids[i]] = struct{}{}
	}
}

// RemovedCoinPrograms returns the removed IDs of the "coin_programs" edge to the CoinProgramParticipant entity.
func (m *UserMutation) RemovedCoinProgramsIDs() (ids []uuid.UUID) {
	for id := range m.removedcoin_programs {
		ids = append(ids, id)
	}
	return
}

// CoinProgramsIDs returns the "coin_programs" edge IDs in the mutation.
func (m *UserMutation) CoinProgramsIDs() (ids []uuid.UUID) {
	for id := range m.coin_programs {
		ids = append(ids, id)
	}
	return
}

// ResetCoinPrograms resets all changes to the "coin_programs" edge.
func (m *UserMutation) ResetCoinPrograms() {
	m.coin_programs = nil
	m.clearedcoin_programs = false
	m.removedcoin_programs = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	if m.qr_data != nil {
		fields = append(fields, user.FieldQrData)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldCreatedAt:
		return m.CreatedAt()
	case user.FieldName:
		return m.Name()
	case user.FieldEmail:
		return m.Email()
	case user.FieldPassword:
		return m.Password()
	case user.FieldQrData:
		return m.QrData()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	case user.FieldQrData:
		return m.OldQrData(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case user.FieldQrData:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetQrData(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldQrData) {
		fields = append(fields, user.FieldQrData)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldQrData:
		m.ClearQrData()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	case user.FieldQrData:
		m.ResetQrData()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.coupons != nil {
		edges = append(edges, user.EdgeCoupons)
	}
	if m.coin_programs != nil {
		edges = append(edges, user.EdgeCoinPrograms)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeCoupons:
		ids := make([]ent.Value, 0, len(m.coupons))
		for id := range m.coupons {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeCoinPrograms:
		ids := make([]ent.Value, 0, len(m.coin_programs))
		for id := range m.coin_programs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedcoupons != nil {
		edges = append(edges, user.EdgeCoupons)
	}
	if m.removedcoin_programs != nil {
		edges = append(edges, user.EdgeCoinPrograms)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeCoupons:
		ids := make([]ent.Value, 0, len(m.removedcoupons))
		for id := range m.removedcoupons {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeCoinPrograms:
		ids := make([]ent.Value, 0, len(m.removedcoin_programs))
		for id := range m.removedcoin_programs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedcoupons {
		edges = append(edges, user.EdgeCoupons)
	}
	if m.clearedcoin_programs {
		edges = append(edges, user.EdgeCoinPrograms)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeCoupons:
		return m.clearedcoupons
	case user.EdgeCoinPrograms:
		return m.clearedcoin_programs
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeCoupons:
		m.ResetCoupons()
		return nil
	case user.EdgeCoinPrograms:
		m.ResetCoinPrograms()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}

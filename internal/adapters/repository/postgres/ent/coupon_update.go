// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"loyalit/internal/adapters/repository/postgres/ent/coupon"
	"loyalit/internal/adapters/repository/postgres/ent/predicate"
	"loyalit/internal/adapters/repository/postgres/ent/reward"
	"loyalit/internal/adapters/repository/postgres/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// CouponUpdate is the builder for updating Coupon entities.
type CouponUpdate struct {
	config
	hooks    []Hook
	mutation *CouponMutation
}

// Where appends a list predicates to the CouponUpdate builder.
func (cu *CouponUpdate) Where(ps ...predicate.Coupon) *CouponUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetCode sets the "code" field.
func (cu *CouponUpdate) SetCode(s string) *CouponUpdate {
	cu.mutation.SetCode(s)
	return cu
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (cu *CouponUpdate) SetNillableCode(s *string) *CouponUpdate {
	if s != nil {
		cu.SetCode(*s)
	}
	return cu
}

// SetActivated sets the "activated" field.
func (cu *CouponUpdate) SetActivated(b bool) *CouponUpdate {
	cu.mutation.SetActivated(b)
	return cu
}

// SetNillableActivated sets the "activated" field if the given value is not nil.
func (cu *CouponUpdate) SetNillableActivated(b *bool) *CouponUpdate {
	if b != nil {
		cu.SetActivated(*b)
	}
	return cu
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (cu *CouponUpdate) SetOwnerID(id uuid.UUID) *CouponUpdate {
	cu.mutation.SetOwnerID(id)
	return cu
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (cu *CouponUpdate) SetNillableOwnerID(id *uuid.UUID) *CouponUpdate {
	if id != nil {
		cu = cu.SetOwnerID(*id)
	}
	return cu
}

// SetOwner sets the "owner" edge to the User entity.
func (cu *CouponUpdate) SetOwner(u *User) *CouponUpdate {
	return cu.SetOwnerID(u.ID)
}

// SetRewardID sets the "reward" edge to the Reward entity by ID.
func (cu *CouponUpdate) SetRewardID(id uuid.UUID) *CouponUpdate {
	cu.mutation.SetRewardID(id)
	return cu
}

// SetReward sets the "reward" edge to the Reward entity.
func (cu *CouponUpdate) SetReward(r *Reward) *CouponUpdate {
	return cu.SetRewardID(r.ID)
}

// Mutation returns the CouponMutation object of the builder.
func (cu *CouponUpdate) Mutation() *CouponMutation {
	return cu.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (cu *CouponUpdate) ClearOwner() *CouponUpdate {
	cu.mutation.ClearOwner()
	return cu
}

// ClearReward clears the "reward" edge to the Reward entity.
func (cu *CouponUpdate) ClearReward() *CouponUpdate {
	cu.mutation.ClearReward()
	return cu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CouponUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CouponUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CouponUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CouponUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CouponUpdate) check() error {
	if v, ok := cu.mutation.Code(); ok {
		if err := coupon.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Coupon.code": %w`, err)}
		}
	}
	if cu.mutation.RewardCleared() && len(cu.mutation.RewardIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Coupon.reward"`)
	}
	return nil
}

func (cu *CouponUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(coupon.Table, coupon.Columns, sqlgraph.NewFieldSpec(coupon.FieldID, field.TypeUUID))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Code(); ok {
		_spec.SetField(coupon.FieldCode, field.TypeString, value)
	}
	if value, ok := cu.mutation.Activated(); ok {
		_spec.SetField(coupon.FieldActivated, field.TypeBool, value)
	}
	if cu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   coupon.OwnerTable,
			Columns: []string{coupon.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   coupon.OwnerTable,
			Columns: []string{coupon.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.RewardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   coupon.RewardTable,
			Columns: []string{coupon.RewardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reward.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RewardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   coupon.RewardTable,
			Columns: []string{coupon.RewardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reward.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{coupon.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CouponUpdateOne is the builder for updating a single Coupon entity.
type CouponUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CouponMutation
}

// SetCode sets the "code" field.
func (cuo *CouponUpdateOne) SetCode(s string) *CouponUpdateOne {
	cuo.mutation.SetCode(s)
	return cuo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (cuo *CouponUpdateOne) SetNillableCode(s *string) *CouponUpdateOne {
	if s != nil {
		cuo.SetCode(*s)
	}
	return cuo
}

// SetActivated sets the "activated" field.
func (cuo *CouponUpdateOne) SetActivated(b bool) *CouponUpdateOne {
	cuo.mutation.SetActivated(b)
	return cuo
}

// SetNillableActivated sets the "activated" field if the given value is not nil.
func (cuo *CouponUpdateOne) SetNillableActivated(b *bool) *CouponUpdateOne {
	if b != nil {
		cuo.SetActivated(*b)
	}
	return cuo
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (cuo *CouponUpdateOne) SetOwnerID(id uuid.UUID) *CouponUpdateOne {
	cuo.mutation.SetOwnerID(id)
	return cuo
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (cuo *CouponUpdateOne) SetNillableOwnerID(id *uuid.UUID) *CouponUpdateOne {
	if id != nil {
		cuo = cuo.SetOwnerID(*id)
	}
	return cuo
}

// SetOwner sets the "owner" edge to the User entity.
func (cuo *CouponUpdateOne) SetOwner(u *User) *CouponUpdateOne {
	return cuo.SetOwnerID(u.ID)
}

// SetRewardID sets the "reward" edge to the Reward entity by ID.
func (cuo *CouponUpdateOne) SetRewardID(id uuid.UUID) *CouponUpdateOne {
	cuo.mutation.SetRewardID(id)
	return cuo
}

// SetReward sets the "reward" edge to the Reward entity.
func (cuo *CouponUpdateOne) SetReward(r *Reward) *CouponUpdateOne {
	return cuo.SetRewardID(r.ID)
}

// Mutation returns the CouponMutation object of the builder.
func (cuo *CouponUpdateOne) Mutation() *CouponMutation {
	return cuo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (cuo *CouponUpdateOne) ClearOwner() *CouponUpdateOne {
	cuo.mutation.ClearOwner()
	return cuo
}

// ClearReward clears the "reward" edge to the Reward entity.
func (cuo *CouponUpdateOne) ClearReward() *CouponUpdateOne {
	cuo.mutation.ClearReward()
	return cuo
}

// Where appends a list predicates to the CouponUpdate builder.
func (cuo *CouponUpdateOne) Where(ps ...predicate.Coupon) *CouponUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CouponUpdateOne) Select(field string, fields ...string) *CouponUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Coupon entity.
func (cuo *CouponUpdateOne) Save(ctx context.Context) (*Coupon, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CouponUpdateOne) SaveX(ctx context.Context) *Coupon {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CouponUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CouponUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CouponUpdateOne) check() error {
	if v, ok := cuo.mutation.Code(); ok {
		if err := coupon.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Coupon.code": %w`, err)}
		}
	}
	if cuo.mutation.RewardCleared() && len(cuo.mutation.RewardIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Coupon.reward"`)
	}
	return nil
}

func (cuo *CouponUpdateOne) sqlSave(ctx context.Context) (_node *Coupon, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(coupon.Table, coupon.Columns, sqlgraph.NewFieldSpec(coupon.FieldID, field.TypeUUID))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Coupon.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, coupon.FieldID)
		for _, f := range fields {
			if !coupon.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != coupon.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Code(); ok {
		_spec.SetField(coupon.FieldCode, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Activated(); ok {
		_spec.SetField(coupon.FieldActivated, field.TypeBool, value)
	}
	if cuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   coupon.OwnerTable,
			Columns: []string{coupon.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   coupon.OwnerTable,
			Columns: []string{coupon.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.RewardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   coupon.RewardTable,
			Columns: []string{coupon.RewardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reward.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RewardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   coupon.RewardTable,
			Columns: []string{coupon.RewardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reward.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Coupon{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{coupon.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}

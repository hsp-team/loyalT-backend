// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"loyalit/internal/adapters/repository/postgres/ent/coinprogram"
	"loyalit/internal/adapters/repository/postgres/ent/coinprogramparticipant"
	"loyalit/internal/adapters/repository/postgres/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// CoinProgramParticipant is the model entity for the CoinProgramParticipant schema.
type CoinProgramParticipant struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Balance holds the value of the "balance" field.
	Balance uint `json:"balance,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CoinProgramParticipantQuery when eager-loading is set.
	Edges                                 CoinProgramParticipantEdges `json:"edges"`
	coin_program_participant_coin_program *uuid.UUID
	user_coin_programs                    *uuid.UUID
	selectValues                          sql.SelectValues
}

// CoinProgramParticipantEdges holds the relations/edges for other nodes in the graph.
type CoinProgramParticipantEdges struct {
	// CoinProgram holds the value of the coin_program edge.
	CoinProgram *CoinProgram `json:"coin_program,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// CoinProgramOrErr returns the CoinProgram value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CoinProgramParticipantEdges) CoinProgramOrErr() (*CoinProgram, error) {
	if e.CoinProgram != nil {
		return e.CoinProgram, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: coinprogram.Label}
	}
	return nil, &NotLoadedError{edge: "coin_program"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CoinProgramParticipantEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CoinProgramParticipant) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case coinprogramparticipant.FieldBalance:
			values[i] = new(sql.NullInt64)
		case coinprogramparticipant.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case coinprogramparticipant.FieldID:
			values[i] = new(uuid.UUID)
		case coinprogramparticipant.ForeignKeys[0]: // coin_program_participant_coin_program
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case coinprogramparticipant.ForeignKeys[1]: // user_coin_programs
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CoinProgramParticipant fields.
func (cpp *CoinProgramParticipant) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case coinprogramparticipant.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				cpp.ID = *value
			}
		case coinprogramparticipant.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cpp.CreatedAt = value.Time
			}
		case coinprogramparticipant.FieldBalance:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field balance", values[i])
			} else if value.Valid {
				cpp.Balance = uint(value.Int64)
			}
		case coinprogramparticipant.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field coin_program_participant_coin_program", values[i])
			} else if value.Valid {
				cpp.coin_program_participant_coin_program = new(uuid.UUID)
				*cpp.coin_program_participant_coin_program = *value.S.(*uuid.UUID)
			}
		case coinprogramparticipant.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_coin_programs", values[i])
			} else if value.Valid {
				cpp.user_coin_programs = new(uuid.UUID)
				*cpp.user_coin_programs = *value.S.(*uuid.UUID)
			}
		default:
			cpp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CoinProgramParticipant.
// This includes values selected through modifiers, order, etc.
func (cpp *CoinProgramParticipant) Value(name string) (ent.Value, error) {
	return cpp.selectValues.Get(name)
}

// QueryCoinProgram queries the "coin_program" edge of the CoinProgramParticipant entity.
func (cpp *CoinProgramParticipant) QueryCoinProgram() *CoinProgramQuery {
	return NewCoinProgramParticipantClient(cpp.config).QueryCoinProgram(cpp)
}

// QueryUser queries the "user" edge of the CoinProgramParticipant entity.
func (cpp *CoinProgramParticipant) QueryUser() *UserQuery {
	return NewCoinProgramParticipantClient(cpp.config).QueryUser(cpp)
}

// Update returns a builder for updating this CoinProgramParticipant.
// Note that you need to call CoinProgramParticipant.Unwrap() before calling this method if this CoinProgramParticipant
// was returned from a transaction, and the transaction was committed or rolled back.
func (cpp *CoinProgramParticipant) Update() *CoinProgramParticipantUpdateOne {
	return NewCoinProgramParticipantClient(cpp.config).UpdateOne(cpp)
}

// Unwrap unwraps the CoinProgramParticipant entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cpp *CoinProgramParticipant) Unwrap() *CoinProgramParticipant {
	_tx, ok := cpp.config.driver.(*txDriver)
	if !ok {
		panic("ent: CoinProgramParticipant is not a transactional entity")
	}
	cpp.config.driver = _tx.drv
	return cpp
}

// String implements the fmt.Stringer.
func (cpp *CoinProgramParticipant) String() string {
	var builder strings.Builder
	builder.WriteString("CoinProgramParticipant(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cpp.ID))
	builder.WriteString("created_at=")
	builder.WriteString(cpp.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("balance=")
	builder.WriteString(fmt.Sprintf("%v", cpp.Balance))
	builder.WriteByte(')')
	return builder.String()
}

// CoinProgramParticipants is a parsable slice of CoinProgramParticipant.
type CoinProgramParticipants []*CoinProgramParticipant
